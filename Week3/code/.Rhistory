MyData <- read.csv("../data/trees.csv")
ls(pattern = "My*")
class(MyData)
head(MyData)
str(MyData)
MyData <- read.csv(../data/trees.csv")
header = F)
q
MyData <- read.csv("../data/trees.csv",header = F)
head(MyData)
MyData <- read.table("../data/trees.csv", sep = ',', header = TRUE)
head(MyData)
write.csv(MyData, "../results/MyData.csv")
write.csv(MyData,"../results/MyData.csv")
dir("../results/")
write.table(MyData[1,],file = "../results/MyData.csv",append=TRUE)
write.csv(MyData,"../results/MyData.csv",row.names = TRUE)
write.table(MyData, "../results/MyData.csv", col.names=FALSE)
source("basic_io.R")
R CMD BATCH MyCode.R MyResults.Rout
a <- TRUE
if (a == TRUE){
    print ("A is TRUE")
} else {
    print ("a is FALSE")
}
z <- runif(1)
if (z <= 0.5){print ("Less than a half")}
z <- runif(1)
if (z<=0.5) {print ("Less than a half")}
for (i in 1:10) {
    j <- i * i
    print(paste(i, " squared is", j ))
}
seq(10)
1:10
for (species in c('Heliodoxa rubinoides', 'Boissonneaua jardini', 'Sula nebouxii')){
    print(paste('The species is', species))
}
i <- 0
while (i < 10){
    i <- i + 1
    print(i^2)
}
source("control_flow.R")
source("boilerplate.R")
source("boilerplate.R")
ls(pattern = "MyFun*)
ls(pattern = "MyFun*")
class(MyFunction)
is.even <- function( n = 2 ) {
    if (n %% 2 == 0) {
        return(paste(n, 'is even!'))
    } else {
        return(paste(n,'is odd!'))
    }
}
is.even(6)
source("R_conditionals.R")
source("R_conditionals.R")
is.prime(3)
is.power2(4)
is.even(6)
source("TreeHeight.R")
a <- 1.0
class(a)
float a
source("Vectorize1.R")
source("Vectorize1.R")
source("Vectorize1.R")
NoPreallocFunc <- function(x) {
    a <- vector()
    for (i in 1:x) {
        a <- c(a, i)
        print(a)
        print(object.size(a))
    }
}
system.time(NoPrealliocFunc(10))
NoPreallocFun <- function(x) {
    a <- vector() # empty vector
    for (i in 1:x) {
        a <- c(a, i) # concatenate
        print(a)
        print(object.size(a))
    }
}
system.time(NoPreallocFun(10))
NoPreallocFun <- function(x) {
    a <- vector()
    for (i in 1:x) {
        a <- c(a, i)
        print(a)
        print(object.size(a))
    }
}
system.time(NoPreallocFun(10))
?apply
## Build a random matrix
M <- matrix(rnorm(100),10,10)
## Take the mean of each row
RowMeans <- apply(M, 1, mean)
print (RowMeans)
# Now the variance
RowVars <- apply(M, 1, var)
print (RowVars)
a <- 1.0
class(a)
float a
M <- matrix(rnorm(100),10,10)
RowMeans <- apply(M, 1, mean)
print (RowMeans)
ColMeans <- apply(M, 2, mean)
print (ColMeans)
ls
cd ..
ls
source apply2.R
run apply2.R
import my_module
run control_flow.py
ls
MyData <- as.matrix(read.csv("../data/PoundHillData.csv",header = FALSE))
class(MyData)
MyMetaData <- read.csv("../data/PoundHillMetaData.csv",header = TRUE,  sep=";")
class(MyMetaData)
head(MyData)
view(MyData)
