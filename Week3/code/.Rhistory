load("../data/KeyWestAnnualMeanTemperature.RData")
corrcoeff <- cor(ats$Year, ats$Temp)
set.seed(1)
randcorr <- matrix(0,nrow = 100, ncol = 100)
for (i in 1:100){
randcorr[i] <- cor(ats$Year, sample(ats$Temp))
}
a <- 0
for (j in randcorr){
if (j > corrcoeff){
a <- a + 1
}
}
a
?rep
set.seed(1)
randcorr <- matrix(0,nrow = 100, ncol = 100)
for (i in 1:100) {
    randcorr[,i] <- sample(ats$Temp, replace = FALSE)
}
corr <- rep(0,100)
for (i in 1:100){
    corr[i] <- cor(randcorr[,i], ats$Year)
}
corr
# calculating correlation coefficient for original data
ogdata <- cor(y=ats$Temp, x=ats$Year, method = "pearson")
# for reproducability of results
set.seed(1)
# the number of observations to sample
n <- length(ats$Year)
# the number of permutation samples to take
P <- 100
# the variable we will resamples from 
variable <- ats$Temp
# initialise a matrix to store the permutation data
PermSamples <- matrix(0, nrow = n, ncol = P) # each column is a permutation sample of data
for (i in 1:P) {
  PermSamples[,i] <- sample(variable, size=n, replace=FALSE)
}
PermSamples[, 1:5]
#initialise vectors to store all of the Test stats:
Perm.test.stat1 <- rep(0, P)
#calculate the test-stats
for (i in 1:P){
  Perm.test.stat1[i] <- cor(PermSamples[,i], ats$Year, method = "pearson")
}
# calculate the permutation p-value and store
mean(Perm.test.stat1 >= ogdata)
no_times_larger <- sum(Perm.test.stat1 >= ogdata)
p_vaue <- no_times_larger/P
p_value
ogdata <- cor(y=ats$Temp, x=ats$Year, method = "pearson")
n <- length(ats$Year)
P <- 100
set.seed(1)
variable <- ats$Temp
PermSamples <- matrix(0, nrow = n, ncol = P) # each column is a permutation sample of data
for (i in 1:P) {
  PermSamples[,i] <- sample(variable, size=n, replace=FALSE)
}
PermSamples[, 1:5]
Perm.test.stat1 <- rep(0, P)
for (i in 1:P){
  Perm.test.stat1[i] <- cor(PermSamples[,i], ats$Year, method = "pearson")
}
mean(Perm.test.stat1 >= ogdata)
no_times_larger <- sum(Perm.test.stat1 >= ogdata)
no_times_larger
p_vaue <- no_times_larger/P
p_value
class(ats)
head(ats)
view(ats)
View(ats)
install.packages("XQuartz")
names(ats)\
names(ats)
randcorr <- c()
for (i in 1:100) {
    randcorr[i] <- cor(ats$Year, sample(ats$Temp))
}
randcorr
source("/Users/xuan/Documents/IC/CMEECourseWork/Week3/code/Florida.R", encoding = "UTF-8")
p_value
plot(ats)
# Author: An an.nguyen21@imperial.ac.uk
# Script: Florida.R
# Desc: Your goal is to write an R script that will help answer the question: 
#       Is Florida getting warmer? To answer the question, you need to calculate 
#       the correlation coefficients between temperature and time. 
#       However, you canâ€™t use the standard p-value calculated for a correlation coefficient, 
#       because measurements of climatic variables in successive time-points in a time series 
#       (successive seconds, minutes, hours, months, years, etc.) are not independent. 
#       Therefore you will use a permutation analysis instead, by generating a distribution of 
#       random correlation coefficients and compare your observed coefficient with this random distribution.
# Arguments: 1 (data file)
# Output: approximate, asymptotic p-value
# Date: Oct 2021
#clear workspace
rm(list=ls())
#load data
load("../data/KeyWestAnnualMeanTemperature.RData")
#correlation coefficient between years and temperature
ce <- cor(ats$Year, ats$Temp)
#calculate possible combination of years and temperature
#200 samples, 19900 possible combinations
numdata <- nrow(ats) * ncol(ats)
sampletime <- numdata * (numdata -1)/2
#shuffle temperature, each time randomly 
#re-assigning temperatures to year
shuffle_cor <- function(x) {
    x[,2] <- sample(x[,2])
    return (cor(x[,1], x[,2]))
}
#repeat the shuffling 19900 times
calfraction <- sapply(1:sampletime, function(i) shuffle_cor(ats))
# histogram to compare coefficient correlations
pdf("../results/Floridaplot.pdf")
hist(calfraction, 
    xlim = c(-0.6, 0.6),
    xlab = "Correlation coefficients of random sample",
    main = NULL)
abline(v = ce, col="blue", lwd=3, lty=2)
text(0.27, 3300, "Original correlation coefficient 
     \n between years and temperature: 0.533", cex = 0.65, col="blue")
dev.off()
#calculate approximate, asymptotic p-value (what fraction of 
#the random correlation coefficients were greater than the observed one 
p <- sum(calfraction >= ce)/length(calfraction)
p
p
cor(ats$Year, ats$Temp)
q()
numpy
install.packages("sqldf")
library(sqldf)
db <- dbConnect(SQLite(), dbname='Test.sqlite')
dbSendQuery(conn = db,
            "CREATE TABLE Consumer
       (OriginalID TEXT,
        ConKingdom TEXT,
        ConPhylum TEXT,
        ConSpecies TEXT)")
source("/Users/xuan/Documents/IC/CMEECourseWork/Week3/code/SQLinR.R", encoding = "UTF-8")
 dbSendQuery(conn = db,
         "INSERT INTO Consumer
         VALUES (1, 'Animalia', 'Arthropoda', 'Chaoborus trivittatus')")
 dbSendQuery(conn = db,
         "INSERT INTO Consumer
         VALUES (2, 'Animalia', 'Arthropoda', 'Chaoborus americanus')")
 dbSendQuery(conn = db,
         "INSERT INTO Consumer
         VALUES (3, 'Animalia', 'Chordata', 'Stizostedion vitreum')")
dbGetQuery(db, "SELECT * FROM Consumer")
dbGetQuery(db, "SELECT * FROM Consumer WHERE ConPhylum='Chordata'")
library(ggplot2)
?commandname
?commandname
require(ggplot2)
?commandname
??commandname
?hist
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")
dim(MyDF)
str(MyDF)
head(MyDF)
require(tidyverse)
glimpse(MyDF)
?glimpse
MyDF$Type.of.feeding.interaction <- as.factor(MyDF$Type.oq
)
MyDF$Type.of.feeding.interaction <- as.factor(MyDF$Tyof
a
MyDF$Type.of.feeding.interaction <- as.factor(MyDF$Type.of.feeding.interaction)
MyDF$Location <- as.factor(MyDF$Location)
str(MyDF)
plot(MyDF$Predator.mass, MyDF$Prey.mass)
plot(log(MyDF$Predator.mass),log(MyDF$Prey.mass))
plot(log10(MyDF$Predator.mass),log10(MyDF$Prey.mass),pch=20) # Change marker
plot(log10(MyDF$Predator.mass),log10(MyDF$Prey.mass),pch=20, xlab = "Predator Mass (g)", ylab = "Prey Mass (g)") # Add labels
hist(log10(MyDF$Predator.mass),xlab="log10(Predator Mass (g))",ylab="Count", 
    col = "lightblue", border = "pink") # Change bar and borders colors 
?hist
par(mfcol-c(2, 1))
par(mfcol = c(2, 1))
par(mfg = c(1, 1))
hist(log10(MyDF$Predator.mass), xlab = "log10(Predator Mass(g))", ylab = "Count",col = "lightblue", border = "pink",
main = "Predator")
par(mfg = c(2, 1))
hist(log10(MyDF$Prey.mass), xlab = "log10(Prey Mass (g))", ylab = "Count", col = "lightgreen", border = "pink", main = 'prey')
hist(log10(MyDF$Predator.mass), xlab = "log10(Body Mass (g))", ylab = "Count", 
col - rgb(1, 0, 0, 0.5), 
)
?legend
?rgb
hist(log10(MyDF$Predator.mass), # Predator histogram
    xlab="log10(Body Mass (g))", ylab="Count", 
    col = rgb(1, 0, 0, 0.5), # Note 'rgb', fourth value is transparency
    main = "Predator-prey size Overlap") 
hist(log10(MyDF$Prey.mass), col = rgb(0, 0, 1, 0.5), add = T) # Plot prey
hist(log10(MyDF$Predator.mass), # Predator histogram
    xlab="log10(Body Mass (g))", ylab="Count", 
    col = rgb(1, 0, 0, 0.5), # Note 'rgb', fourth value is transparency
    main = "Predator-prey size Overlap") 
hist(log10(MyDF$Predator.mass), # Predator histogram
    xlab="log10(Body Mass (g))", ylab="Count", 
    col = rgb(1, 0, 0, 0.5), # Note 'rgb', fourth value is transparency
    main = "Predator-prey size Overlap") 
hist(log10(MyDF$Prey.mass), col = rgb(0, 0, 1, 0.5), add = T) # Plot prey
legend('topleft',c('Predators','Prey'),   # Add legend
    fill=c(rgb(1, 0, 0, 0.5), rgb(0, 0, 1, 0.5))) # Define legend colors
?legend
?legend
boxplot(log(MyDF$Predator.mass) ~ MyDF$Location, # Why the tilde?
    xlab = "Location", ylab = "Predator Mass",
    main = "Predator mass by location")
boxplot(log(MyDF$Predator.mass) ~ MyDF$Type.of.feeding.interaction,
    xlab = "Location", ylab = "Predator Mass",
    main = "Predator mass by feeding interaction type")
 par(fig=c(0,0.8,0,0.8)) # specify figure size as proportion
 plot(log(MyDF$Predator.mass),log(MyDF$Prey.mass), xlab = "Predator Mass (g)", ylab = "Prey Mass (g)") # Add labels
 par(fig=c(0,0.8,0.4,1), new=TRUE)
 boxplot(log(MyDF$Predator.mass), horizontal=TRUE, axes=FALSE)
 par(fig=c(0.55,1,0,0.8),new=TRUE)
 boxplot(log(MyDF$Prey.mass), axes=FALSE)
 mtext("Fancy Predator-prey scatterplot", side=3, outer=TRUE, line=-3)
pdf("../results/Pred_Prey_Overlay.pdf", # Open blank pdf page using a relative path
    11.7, 8.3) # These numbers are page dimensions in inches
hist(log(MyDF$Predator.mass), # Plot predator histogram (note 'rgb')
    xlab="Body Mass (g)", ylab="Count", col = rgb(1, 0, 0, 0.5), main = "Predator-Prey Size Overlap") 
hist(log(MyDF$Prey.mass), # Plot prey weights
    col = rgb(0, 0, 1, 0.5), 
    add = T)  # Add to same plot = TRUE
legend('topleft',c('Predators','Prey'), # Add legend
    fill=c(rgb(1, 0, 0, 0.5), rgb(0, 0, 1, 0.5))) 
graphics.off(); #you can also use dev.off() 
require(ggplot2)
source("/Users/xuan/Documents/IC/CMEECourseWork/Week3/code/PP_Dists.R", encoding = "UTF-8")
plot(data$IndividualID, data$Predator)
data
type(data)
class(data)
data$Record.number
data$In-refID
dim(data)
source("/Users/xuan/Documents/IC/CMEECourseWork/Week3/code/PP_Dists.R", encoding = "UTF-8")
MyDF$source("/Users/xuan/Documents/IC/CMEECourseWork/Week3/code/PP_Dists.R", encoding = "UTF-8")
source("/Users/xuan/Documents/IC/CMEECourseWork/Week3/code/PP_Dists.R", encoding = "UTF-8")
str(MyDF)
head(MyDF)
head(MyDF)
MyDF$Type.of.feeding.interaction <- as.factor(MyDF$Type.of.feeding.interaction)
MyDF$Location <- as.factor(MyDF$Location)
str(MyDF)
MyDF$Type.of.feeding.interaction
?mfg
??mfg
?par
hist(log10(MyDF$Predator.mass), 
    xlab = "log10(Predator Mass(g))",
    main = 'Predator Mass')
hist(log10(MyDF$Prey.mass.unit),
    xlab = "log10(Prey Mass)",
    main = 'Prey Mass')
MyDF$Prey.mass.unit
MyDF$Prey.mass
hist(log10(MyDF$Prey.mass),
    xlab = "log10(Prey Mass)",
    main = 'Prey Mass')
MyDF$Type.of.feeding.interaction <- as.factor(MyDF$Type.of.feeding.interaction)
?factor
?group_by
group_by(MyDF$Type.of.feeding.interaction)
require(dplyr)
require(tidyverse)
group_by(MyDF$Type.of.feeding.interaction)
?by
require(plyr)
?ddply
ddply(MyDF, .(MyDF$Type.of.feeding.interaction), ratio = MyDF$Prey.mass/MyDF$Predator.mass)
ddply(MyDF, .(MyDF$Type.of.feeding.interaction), ratio = MyDF$Prey.mass/MyDF$Predator.mass)
ddply(MyDF, .(MyDF$Type.of.feeding.interaction), ratio = MyDF$Prey.mass/MyDF$Predator.mass)
MyDF$prey.over.predator <- ddply(MyDF, .(MyDF$Type.of.feeding.interaction), ratio = MyDF$Prey.mass/MyDF$Predator.mass)
MyDF
head(MyDF)
?by
MyDF$prey.over.predator <- by(MyDF, MyDF$Type.of.feeding.interaction, MyDF$Prey.mass/MyDF$Predator.mass)
MyDF$prey.over.predator <- by(MyDF, MyDF$Type.of.feeding.interaction, FUN = MyDF$Prey.mass/MyDF$Predator.mass)
ratio <- function(prey, predator){
    ratio <- prey/predator
    return ratio
}
ratio <- function(prey, predator){
    result <- prey/predator
    return result
ratio <- function(prey, predator){
    result <- prey/predator
    return(result)
}
ratio(1, 2)
MyDF$prey.over.predator <- by(MyDF, MyDF$Type.of.feeding.interaction, ratio(MyDF$Prey.mass,MyDF$Predator.mass))
by(MyDF, MyDF$Type.of.feeding.interaction, ratio)
MyDF$prey.over.predator <- by(MyDF, MyDF$Type.of.feeding.interaction, ratio(Prey.mass,Predator.mass))
MyDF$prey.over.predator <- by(MyDF, MyDF$Type.of.feeding.interaction, ratio(MyDF$Prey.mass,Predator.mass))
MyDF$prey.over.predator <- by(MyDF, MyDF$Type.of.feeding.interaction, ratio(MyDF$Prey.mass,MyDF$Predator.mass))
?fun
??FUN
by(MyDF, MyDF$Type.of.feeding.interaction, ratio)
by(MyDF, MyDF$Type.of.feeding.interaction, mean)
by(MyDF, MyDF$Type.of.feeding.interaction, ratio(MyDF))
MyDF$prey.over.predator <- by(MyDF, MyDF$Type.of.feeding.interaction, ratio(MyDF$Prey.mass,MyDF$Predator.mass))
?by
MyDF$prey.over.predator <- with(MyDF, by(MyDF, MyDF$Type.of.feeding.interaction, ratio(MyDF$Prey.mass,MyDF$Predator.mass)))
MyDF$prey.over.predator <- with(MyDF, by(MyDF, MyDF$Type.of.feeding.interaction, ratio)
)
by(MyDF, MyDF$Type.of.feeding.interaction, ratio(x, y){MyDF$Prey.mass ~ MyDF$Predator.mass, data = MyDF})
by(MyDF, MyDF$Type.of.feeding.interaction, ratio(x, y))
by(MyDF, MyDF$Type.of.feeding.interaction, ratio(x, y) x = MyDF$Prey.mass)
by(MyDF, MyDF$Type.of.feeding.interaction, ratio(x, y) x=MyDF$Prey.mass)
by(MyDF, MyDF$Type.of.feeding.interaction, ratio(1,2))
ratio(MyDF$Predator.mass, MyDF$Prey.mass)
ratio <- function(prey, predator){
    result <- log10(prey)/log10(predator)
    return(result)
}
ratio(MyDF$Prey.mass, MyDF$Predator.mass)
by(MyDF, MyDF$Type.of.feeding.interaction, ratio(MyDF$Prey.mass, MyDF$Predator.mass))
by(MyDF, MyDF$Type.of.feeding.interaction, ratio(MyDF$Prey.mass, MyDF$Predator.mass))
?by
group_by(MyDF, MyDF$Type.of.feeding.interaction)
x <- group_by(MyDF, MyDF$Type.of.feeding.interaction)
summarise(x, ratio = ratio(MyDF$Prey.mass, MyDF$Predator.mass))
category <- group_by(MyDF, MyDF$Type.of.feeding.interaction)
require(dplyr)
MyDF %>% group_by(MyDF, MyDF$Type.of.feeding.interaction)
MyDF$ratio <- ratio(MyDF$Prey.mass, MyDF$Predator.mass)
head(MyDF)
rm(list = ls())
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")
require(ggplot2)
require(tidyverse)
require(dplyr)
MyDF$Type.of.feeding.interaction <- as.factor(MyDF$Type.of.feeding.interaction)
MyDF$Location <- as.factor(MyDF$Location)
str(MyDF)
ratio <- function(prey, predator){
    result <- log10(prey)/log10(predator)
    return(result)
}
MyDF$ratio <- ratio(MyDF$Prey.mass, MyDF$Predator.mass)
MyDF %>% group_by(MyDF, MyDF$Type.of.feeding.interaction)
ratio <- function(prey, predator){
    result <- prey/predator
    return(result)
}
MyDF$ratio <- ratio(MyDF$Prey.mass, MyDF$Predator.mass)
MyDF %>% group_by(MyDF, MyDF$Type.of.feeding.interaction)
hist(log10(MyDF$ratio),
    xlab = "log10(Size ratio of prey mass over predator mass)",
    main = 'Size ratio')
?unique
dplyr::glimpse(MyDF)
category <- unique(MyDF$Type.of.feeding.interaction)
for (each in category){
    plot(density(log10(MyDF$Predator.mass)), 
        xlab = "log10(Predator Mass(g))",
        ylab = "Density"
        main = each)
}
for (each in category){
    plot(density(log10(MyDF$Predator.mass)), 
        xlab = "log10(Predator Mass(g))",
        ylab = "Density"
        main = each)
for (each in category){
    plot(density(log10(MyDF$Predator.mass)), xlab = "log10(Predator Mass(g))",
        ylab = "Density",
        main = each)
}
length(category)
n = 1
par(mfrow = c(5, 1))
for (each in category){
    par(mfg = c(n, 1))
    plot(density(log10(MyDF$Predator.mass)), xlab = "log10(Predator Mass(g))",
        ylab = "Density",
        main = each)
    n <- n + 1
}
m = 1
par(mfrow = c(5, 1))
for (each in category){
    par(mfg = c(m, 1))
    plot(density(log10(MyDF$Prey.mass)),
        xlab = "log10(Prey Mass)",
        ylab = "Density",
        main = each)
    m <- m + 1
}
n = 1
par(mfrow = c(5, 1))
for (each in category){
    par(mfg = c(n, 1))
    plot(density(log10(MyDF$Predator.mass[MyDF$Type.of.feeding.interaction == each])), 
        xlab = "log10(Predator Mass(g))",
        ylab = "Density",
        main = each)
    n <- n + 1
}
m = 1
par(mfrow = c(5, 1))
for (each in category){
    par(mfg = c(m, 1))
    plot(density(log10(MyDF$Prey.mass[MyDF$Type.of.feeding.interaction == each])),
        xlab = "log10(Prey Mass)",
        ylab = "Density",
        main = each)
    m <- m + 1
}
m = 1
par(mfrow = c(5, 1))
for (each in category){
    par(mfg = c(m, 1))
    plot(density(log10(MyDF$Prey.mass)),
        xlab = "log10(Prey Mass)",
        ylab = "Density",
        main = each)
    m <- m + 1
}
source("/Users/xuan/Documents/IC/CMEECourseWork/Week3/code/PP_Dists.R", encoding = "UTF-8")
?pdf
pdf("../results/Pred_Subplots.pdf", width = 11, height = 8)
n = 1
par(mfrow = c(5, 1))
for (each in category){
    par(mfg = c(n, 1))
    plot(density(log10(MyDF$Predator.mass[MyDF$Type.of.feeding.interaction == each])), 
        xlab = "log10(Predator Mass(g))",
        ylab = "Density",
        main = each)
    mean_pred <- log(mean(MyDF$Predator.mass[MyDF$Type.of.feeding.interaction == each]))
    median_pred <- median(MyDF$Predator.mass[MyDF$Type.of.feeding.interaction == each])
    n <- n + 1
}
pdf("../results/Pred_Subplots.pdf", width = 11, height = 8)
n = 1
par(mfrow = c(5, 1))
for (each in category){
    par(mfg = c(n, 1))
    plot(density(log10(MyDF$Predator.mass[MyDF$Type.of.feeding.interaction == each])), 
        xlab = "log10(Predator Mass(g))",
        ylab = "Density",
        main = each)
    mean_pred <- log(mean(MyDF$Predator.mass[MyDF$Type.of.feeding.interaction == each]))
    median_pred <- median(MyDF$Predator.mass[MyDF$Type.of.feeding.interaction == each])
    n <- n + 1
}
graphics.off();
source("/Users/xuan/Documents/IC/CMEECourseWork/Week3/code/PP_Dists.R", encoding = "UTF-8")
df <- data.frame(Feeding type = MyDF$Type.of.feeding.interaction)
df <- data.frame(Feeding.type = MyDF$Type.of.feeding.interaction)
df
mean_prey
median_prey
?data.frame
data.frame(category, mean_pred, mean_prey, mean_ratio)
mean_pred[1]
mean_pred[2]
x = c()
x <- log(10)
c
x
x - c()
x = c()
x <- character()
x <- c(x, 1)
x
x <- c(x, 2)
x
mean_pred = c()
median_pred = c()
for (each in category){
    par(mfg = c(n, 1))
    plot(density(log10(MyDF$Predator.mass[MyDF$Type.of.feeding.interaction == each])), 
        xlab = "log10(Predator Mass(g))",
        ylab = "Density",
        main = each)
    mean_pred <- c(mean_pred, log(mean(MyDF$Predator.mass[MyDF$Type.of.feeding.interaction == each])))
    median_pred <- c(median_pred, median(MyDF$Predator.mass[MyDF$Type.of.feeding.interaction == each]))
    n <- n + 1
}
n = 1
par(mfrow = c(5, 1))
mean_pred = c()
median_pred = c()
for (each in category){
    par(mfg = c(n, 1))
    plot(density(log10(MyDF$Predator.mass[MyDF$Type.of.feeding.interaction == each])), 
        xlab = "log10(Predator Mass(g))",
        ylab = "Density",
        main = each)
    mean_pred <- c(mean_pred, log(mean(MyDF$Predator.mass[MyDF$Type.of.feeding.interaction == each])))
    median_pred <- c(median_pred, median(MyDF$Predator.mass[MyDF$Type.of.feeding.interaction == each]))
    n <- n + 1
}
median_pred
source("/Users/xuan/Documents/IC/CMEECourseWork/Week3/code/PP_Dists.R", encoding = "UTF-8")
df <- data.frame(category, mean_pred, mean_prey, mean_ratio, median_pred, median_prey, median_ratio)
df
write.csv(df, "../results/PP_results.csv")
q()
