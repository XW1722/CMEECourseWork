Starting code feedback for Xuan, Week2

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 18.40 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: .git, MiniProject, Week7, Week1, Week3, Feedback, Week2, xw1722

Found the following files in parent directory: .DS_Store, README.md, .gitignore

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:

**********************************************************************
.DS_Store
**********************************************************************

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
# CMEE Coursework Repository

## Description:

This is the repository of the coursework for MSc in Computational Methods in Ecology and Evolution, Imperial College London Silwood Campus, for the academic year 2022/23.

The CourseWork in this repository is mainly composed of the contents in *The Multilingual Quantitative Biologist* from the link: https://mhasoba.github.io/TheMulQuaBio/intro.html

The major source of the dataset are from:
git@github.com:mhasoba/TheMulQuaBio.git

## Structure:

The contents in each directory are listed as follows.

### Week1:

Week1 is an introduction to the Unix & Linux system.

- Shell scripting

- LaTeX learning

### Week2:

This directory contains mainly the instructions to Python programming, which includes:

- Loops and list comprehensions

- Writing a program with control flows

- Unit testing with docstring

- Some commonly used Python packages

### Week3:

Week3 mainly focus on the R scripting.

- R basics

- R control flows

- Vectorization

- Debugging

### Week7:

Week7 contains some advanced skills in Python, and also an introduction to Jupyter Notebook.

- Numerical computing

- Profiling

- Using Python to build workflows

### xw1722:

This is the HPC directory containing the High Performance Computing Programming Exercises. The files inside includes:

- xw1722_HPC_2022_neutral_cluster.R: The R script used for clustering for the neutral model;

- xw1722_HPC_2022_demographic_cluster.R: The R script used for clustering for the stochastic model;

- xw1722_HPC_2022_main.R: The R script containing the answers to all the questions from 1 to 37, and also the challenge questions;

- .png files: The graphs generated from the answers;

- .e and .o files: Generated by the cluster for the simulation runs;

- .rda files: Output files generated from the simulation runs, and a summary file.

### MiniProject:

The files in the directory of MiniProject provides the answers to the question: *What mathematical models best fit an empirical dataset?*

## Dependencies:

**Languages:**

R version 4.2.2

Python 3.9.12

IPython 7.31.1

LaTeX

Shell

**Packages:**

*Python* - numpy, scipy, matplotlib, ipdb, pandas

*R* - minpack.lm, tidyverse, reshape2, maps

## Author name and contact:

Author: Xuan Wang

Email: xuan.wang22@imperial.ac.uk

**********************************************************************

======================================================================
Looking for the weekly directories...

Found 4 weekly directories: Week1, Week2, Week3, Week7

The Week2 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK2...

Found the following directories: code, sandbox, results, data

Found the following files: .DS_Store, README.md, .gitignore

Checking for readme file in weekly directory...

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
# CMEE CourseWork Week2


## Description:

This is the repository of Week2 coursework of CMEE. This is completed and pushed on 23rd Oct 2022.


## Language:

Python


## Project structure:

**Individual Works**

*lc1.py, lc2.py, dictionary.py, tuple.py* - Tasks from TheMulQuaBio repository;

*cfexercises1.py* - Write a program with control flows;

*align_seqs.py* - Align DNA sequence exercise;

*oaks_debugme.py* - Debug exercise.

**Group Works**

*align_seqs_better.ipynb*

*align_seqs_better.py*

*align_seqs_fasta.py*

*oaks_debugme_groupwork.py*

## Author name and contact:

Xuan Wang

xuan.wang22@imperial.ac.uk
**********************************************************************

Results directory is empty - good! 

Found 25 code files: align_seqs_better.ipynb, debugme.py, lc2.py, align_seqs_fasta.py, control_flow.py, loops.py, basic_io3.py, cfexercises1.py, oaks.py, align_seqs_better.py, align_seqs.py, using_name.py, dictionary.py, test_control_flow.py, oaks_debugme_groupwork.py, sysargv.py, tuple.py, cfexercises2.py, basic_io1.py, basic_io2.py, boilerplate.py, MyExampleScript.py, lc1.py, basic_csv.py, oaks_debugme.py

======================================================================
Testing script/code files...

======================================================================
Inspecting script file align_seqs_better.ipynb...

File contents are:

**********************************************************************
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "bc74663e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "import csv\n",
    "import re"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9db36f0d",
   "metadata": {},
   "outputs": [],
   "source": [
    "def calculate_score(s1, s2, l1, l2, startpoint):\n",
    "    \"\"\"\n",
    "    This function calculates the best source when s1, s2, l1, l2 and the startpoint are provided. \n",
    "    It aligns the shorter sequence at the startpoint location of the longer sequence and calculates the number of matching base pairs\n",
    "    If you want to import this function as a module, assign the longer sequence s1, and the shorter to s2. \n",
    "    l1 is length of the longest, l2 that of the shortest\n",
    "    \"\"\"\n",
    "    matched = \"\" # to hold string displaying alignements\n",
    "    score = 0\n",
    "    #import ipdb; ipdb.set_trace()\n",
    "    for i in range(l2):\n",
    "        if (i + startpoint) < l1:\n",
    "            if s1[i + startpoint] == s2[i]: # if the bases match\n",
    "                matched = matched + \"*\"\n",
    "                score = score + 1\n",
    "            else:\n",
    "                matched = matched + \"-\"\n",
    "\n",
    "    # some formatted output\n",
    "    print(\".\" * startpoint + matched)           \n",
    "    print(\".\" * startpoint + s2)\n",
    "    print(s1)\n",
    "    print(score) \n",
    "    print(\" \")\n",
    "\n",
    "    return score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "162d9419",
   "metadata": {},
   "outputs": [],
   "source": [
    "def main(argv):\n",
    "    \"\"\"\n",
    "    Main entry point of the program.\n",
    "    This program takes a .txt file as input and then calculates the best score among the two sequences.\n",
    "    It prints the outout to another .txt file which is then stored in the results directory\n",
    "    \"\"\"\n",
    "    \n",
    "    # Opening the data file\n",
    "    with open('../data/seqs.txt', 'r') as f:\n",
    "        temp = []\n",
    "        for line in f:\n",
    "            temp.append(line.split('\\n')[0])\n",
    "\n",
    "    # Asigning the sequences\n",
    "    seq1 = temp[0]\n",
    "    seq2 = temp[1]\n",
    "\n",
    "    # Assign the longer sequence s1, and the shorter to s2\n",
    "    # l1 is length of the longest, l2 that of the shortest\n",
    "\n",
    "    l1 = len(seq1)\n",
    "    l2 = len(seq2)\n",
    "    if l1 >= l2:\n",
    "        s1 = seq1\n",
    "        s2 = seq2\n",
    "    else:\n",
    "        s1 = seq2\n",
    "        s2 = seq1\n",
    "        l1, l2 = l2, l1 # swap the two lengths\n",
    "    \n",
    "# now try to find the best match (highest score) for the two sequences\n",
    "    my_best_align = None\n",
    "    my_best_score = -1\n",
    "\n",
    "    for i in range(l1): # Note that you just take the last alignment with the highest score\n",
    "        z = calculate_score(s1, s2, l1, l2, i)\n",
    "        if z > my_best_score:\n",
    "            my_best_align = \".\" * i + s2 # think about what this is doing!\n",
    "            my_best_score = z \n",
    "    print(my_best_align)\n",
    "    print(s1)\n",
    "    print(\"Best score:\", my_best_score)\n",
    "\n",
    "    list_to_save = [my_best_align, s1, 'Best score: ', my_best_score]\n",
    "\n",
    "    f = open('../results/best_align.txt', 'w+')\n",
    "    for i in list_to_save:\n",
    "        f.write(str(i) + '\\n')\n",
    "    f.close() \n",
    "    return 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e4c87959",
   "metadata": {},
   "outputs": [],
   "source": [
    "if __name__ == '__main__':\n",
    "    \"\"\"Makes sure the main function is called from the command line\"\"\"\n",
    "    status = main(sys.argv)\n",
    "    sys.exit(status)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f4bc3c4f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#####################\n",
    "# code to read FASTA file\n",
    "#####################\n",
    "def fasta_parser(args= ['../data/407228326.fasta', '../data/407228412.fasta']):\n",
    "    \n",
    "    hre=re.compile('>(\\S+)')\n",
    "    lre=re.compile('^(\\S+)$')\n",
    "    dict_fastas = {}\n",
    "    for x in range(1, 10):\n",
    "        d[\"string{0}\".format(x)] = \"Hello\"\n",
    "\n",
    "    for i in range(args):\n",
    "\n",
    "        f=open(args[i],'r')\n",
    "        lines=f.readlines()\n",
    "        \"Seq{0}\".format(i) = {}\n",
    "\n",
    "    \n",
    "    seq1={}\n",
    "\n",
    "    for line in lines:\n",
    "            outh = hre.search(line)\n",
    "            if outh:\n",
    "                    id=outh.group(1)\n",
    "            else:\n",
    "                    outl=lre.search(line)\n",
    "                    if(id in seq1.keys()):\n",
    "                            seq1[id] += outl.group(1)\n",
    "                    else:\n",
    "                            seq1[id]  =outl.group(1)\n",
    "                            dict_fastas[\"seq{0}\".format(i)] = \"Hello\"\n",
    "    f.close()\n",
    "    \n",
    "    f=open(arg2,'r')\n",
    "    lines=f.readlines()\n",
    "\n",
    "    seq2={}\n",
    "\n",
    "    for line in lines:\n",
    "            outh = hre.search(line)\n",
    "            if outh:\n",
    "                    id=outh.group(1)\n",
    "            else:\n",
    "                    outl=lre.search(line)\n",
    "                    if(id in seq2.keys()):\n",
    "                            seq2[id] += outl.group(1)\n",
    "                    else:\n",
    "                            seq2[id]  =outl.group(1)\n",
    "    f.close()\n",
    "    \n",
    "    return seq1, seq2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "7e1d3bbf",
   "metadata": {},
   "outputs": [],
   "source": [
    "def entry_point(argv):\n",
    "    if len(argv) != 3:\n",
    "        print(\"Too few or too many arguements...\")\n",
    "        print(\"Continuing with defaults..\")\n",
    "        seq1, seq2 = fasta_parser().values()\n",
    "        print(seq1)\n",
    "        print(\"##########################\")\n",
    "        print(seq2)\n",
    "    else:\n",
    "        try:\n",
    "            arg1 = argv[1]\n",
    "            arg2 = argv[2]\n",
    "            re.search(r'\\w+\\.fasta\\s\\w+\\.fasta', arg1 + \" \" + arg2).group()\n",
    "            print(\"Better to write a fasta parsing function\")\n",
    "            seq1, seq2 = fasta_parser().values()\n",
    "            print(seq1)\n",
    "            print(\"##########################\")\n",
    "            print(seq2)\n",
    "        except:\n",
    "            print(\"Going back to defaults since wrong inout was given\")\n",
    "            seq1, seq2 = fasta_parser().values()\n",
    "            print(seq1)\n",
    "            print(\"##########################\")\n",
    "            print(seq2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9df0508c",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"Too few or too many arguements...\")\n",
    "print(\"Continuing with defaults..\")\n",
    "\n",
    "# code to read FASTA file\n",
    "f=open('../data/407228326.fasta','r')\n",
    "lines=f.readlines()\n",
    "\n",
    "hre=re.compile('>(\\S+)')\n",
    "lre=re.compile('^(\\S+)$')\n",
    "\n",
    "fasta1={}\n",
    "\n",
    "for line in lines:\n",
    "        outh = hre.search(line)\n",
    "        if outh:\n",
    "                id=outh.group(1)\n",
    "        else:\n",
    "                outl=lre.search(line)\n",
    "                if(id in fasta1.keys()):\n",
    "                        fasta1[id] += outl.group(1)\n",
    "                else:\n",
    "                        fasta1[id]  =outl.group(1)\n",
    "f.close()\n",
    "#####################\n",
    "# code to read FASTA file\n",
    "f=open('../data/407228412.fasta','r')\n",
    "lines=f.readlines()\n",
    "print(lines)\n",
    "hre=re.compile('>(\\S+)')\n",
    "lre=re.compile('^(\\S+)$')\n",
    "\n",
    "gene={}\n",
    "\n",
    "for line in lines:\n",
    "        outh = hre.search(line)\n",
    "        if outh:\n",
    "                id=outh.group(1)\n",
    "        else:\n",
    "                outl=lre.search(line)\n",
    "                if(id in gene.keys()):\n",
    "                        gene[id] += outl.group(1)\n",
    "                else:\n",
    "                        gene[id]  =outl.group(1)\n",
    "f.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c3b4d5f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "line"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "3b7095f4",
   "metadata": {},
   "outputs": [],
   "source": [
    "argv = ['xdfghj']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "6c54eff3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Too few or too many arguements...\n",
      "Continuing with defaults..\n",
n",
      "##########################\n",
      "AGAATGGCGCAGCCACTTTGGAAGACAGTTTGGCAGTTTCTTACAAAGCTAAACATACTCTTACTATATGATCTAGCAATTGTGCTTCTAGGTATTTACTTACCCAAGGAGTTGAAAACTTATGCCCACACAAAAACCTGCACATGATGTTGATAGCATCTTTACCCATAATTGCCAAAAAGTTGAAGGAACCAAAGTGTCCTTCAAAAGGCGAATGGGTAGAACAACTGTGGTACATCCAGACAATGGAATATCATTCAGAGACAAAAAGCAATGAGCTGGCCGGGTGCGGTGTCTCATGCCTGTAATCCCAGCACTTTGGGAGGCTGAGGCGGGCGGACCATGTGGTCAGGAGATTGAGACCATCCTGGCTAACACAGTGAAAACCCATCTCTAAAAAAAAAAAAAAAAAACAACAGCTGGGCATGGTGGCAGGTGCCTGTAGTCCCAGCTACTCGGAGGCTGAGGCAGGAGAATGGCGTGAACCCGGGAGGCGCAGCTTGCAGTGAGCCGAGATCACACCACTGCACTCCAGCCTAGGAGACAGAGCGAGACTCTGTCTCAAAATAAATAAATAAATAAATAAATAAATAAATAAATAAATAAATAAAAGCAAGGAGCTATCAAGCCTTGAAAAGACATACAGGGGCCATAACTGCCTACTACTCAGTGAAAGAAGCTAGTCGGAAAAAGTTAATAGTGTATCGTTGATAGTGGATAAGTCAAAACTTCAGAGACAATGAAAATATCCGTGGTTTCCAGGGGATGGGGAGAGGGAGAGGCAGTGGAGCACGAGATTTTGAGGGCAGGGGATGTATTCCGCATAATACGGTAATGGTGGACACATGACTTGTGCACTTGCCACGACCCACAGAATGTACAACAGACAGAGTGAACCCTCATGTAAACTGTGGGAGTTCGTTAGTAATAATGTATCAATATTGTTCATCAGCTGTAACAATGCACCCACAGTAATGCAAAATGTTCATAACAGGAAACTCTGTGTGTGGGGATGTGTGTGTGGGGGGATACGATCTGTACTATCTGCCCAGTTGTCTGTAAACTTAAAACTGCTCTAAAAAATAAAGTGCATTAATTCCAAAACACCACAACTTCACGTGCAATTTCAACTTGCAACAGCCTGCTTTTAGTCTCCCCGGATCCTTCTGTTACTGTAGCACACGCCGCACCCTTGTGTATTCCATAAACCACACGATACCTGCACTCGCTTTGCTGTTGTTGCTTCAAACTGCCAATTCTCTTTCAAATATTTTTTGAGAGAGAAAACTGTCTTACACAGTCACAGCTGTTTCCATTTCCAGAGTTTATCTTCCCTTAGTCTAGGTCTAGATGTTCATCTCTTATCATCTTCTTCCTGCAGAACTTCCTTTCACATTTCTTTTTTTTTTTTTTTTTTTTTTTTTTGAGACGGAGTCTCCTTCATTGCCCAGGCTGGAGTGCAGTGGCGCCATCTCGGATCACGGCAAGCTCCGCCTCCCGGGTTCACGCCATTCTCCTGCCTCAGCCTCCCGAGTAGCTGGGACTACAGGTGCCCGCCACCACGCCCGGCTAATTTTTTGTATTTTTAGTAGAGACAGGGTTTCACTGTGTTAGCCAGGGGGGTCTCGAACTCCTGACCTCAGGTGATCCACCCGCCTTGGCCTCCCGAAGTGCTAGGATTACAGGCGTGAGCCACCGCGCCCAGCTAATTTTTGTATTTTTAGTAGAGATGGGGTTTCATCACGTTGGCCAGGCTGGTCTTGAACTCCTGACCTCAGGTGACCCAGCCGCCTCGGCCTCCCAAAGTGCTAGGATTACAGGCGTGAACCACCACGCCCGAACATGATTGATTTTTTTTATCGGGAGGTCATCCTTTTTCATGCCTGCTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTAGACACGGTATTGCTTTGTTGCCAGACTGGAGTGCAGTGGCACGATCTCGGCTCACTGCATCCTCTGACTCCCTGGTTCAAGCGATTCTCCTGCCTCAGCCTCCCGAGTAGCTGGGATTACAGGCACGTGCCACCACGCCCGGCTAATTTTTATATTTTTAGTAGAGACGGGGTTTCACCATGTGGGCCAGGCTGGTCTCGTTCTCCTGACCTCACGATCTGCCACCTCGGCCTCCCAAAGTGCTGGGATGACAGGCGTGAGCCACCGCGCCCGGCCACCCGCTCGTTCTTGACTAGCCCCCGGATCTCGTGAGTACTCTCTGGAGTGTTTTGTTGCGTGCTGGGTTGTGTTCTATTCCTTGACATCGTTTTGAGATGTGTTCTCACAGGCAGTTAAGTCACTTGCAATCATTTGGATCCGTCTGGGCTTTGCTTTTCAGCTTTGTGAGGGTGGGTCCGGAGAAGCCTTTGGTTTCGGGATTACTTTCTCCCCTCGTACCCTTCCATACCCTTCCGAGGACTCTCCAGTGCCTGCCTCTGACAAGGTTTCTCCACTCAGCTGCTGGGAACACGCGATATCCCCAGCCCCGCGCGCACTCCCGGACTCCGCCCCTCTCATCTGGTGGTTCTCGTTTCCGACGCGGCTCCCACGTCTCTCTGCATCTCCGGCACTCGGCCGAGGACGCCGGGGGGAACCCCCTGCGGATGCCCGGAGCTCTCCGTGCAGTTCTCCGCCTCGTGAGTCATGGCTGCCGGGGCCTCTGCACGCGCCAGGTGCGTCTCCCCAGCCCAGCAAGCTCCTGGGGCTGAGTTTCCCATCGCTGCCCTGAGTCTGGGCGCGGCCACTGTCGTCTCACCCGACTCCCCACCCTTCTCTCGGGGACACTGCCCCACGTGGCCTCTTGCCCAGTGTCTGTCAATGGCCTGGGACCCCAGCCCTGCAGCAGCCCCAGGGGAGCGGCCGGGGATCGGGGCGGGGTGCCCAGGACGCGCCCTGATTGGCCCAGTGTTAGCCAATCAAGGCTCTCGCATCCCCATGGTGCTGATTGGTCCGCCTCCCAGGCCTGACCCAATCGGAGCATTCCTAGGAGGAGCGGCCCCAGAGCCCCTGACTCGGGGGTCCCAGAGCCCTCTGCACACCACAGCCCCGGTGTCCCCGTGTGTCCCTGGGTTCTCCCAGCCCTGGTGTCCCCTGAGTCTCTTCTTCACCGTCAGCCCTGGTGTCTCCCGTGTCCCTGCCACACCCTCATCCCTGGTGTCCCCCGTCACCCCATCCCCTCACCTCCTGGGCTCCTGAAGGTCCCATCTTGTGGGCCTCATTCATGGAACCAGGACGGGGCAGGTGGAGGCCTCTGGGGAGTTTGTCCAGAGAATGGAGGAGAAGCAGGGTCATGAGCAGGAGCGGTCTGGGCCACCCCTGCCTGTCCCCCGGGGGGTGCAGCCCGGAAGGAGTCCAGATGCATATGGCCCCGCAGTGCAGAGTCAGCCCCAAACCAGGCTGGTCCCAGGCAGGGTGGGGGCAGGAGGAGCCCTGGAGTGGCCCTGTGTTGGGGGTCGGGGGGCAGGCAGGGGGTCCTGGGGCTCAGAAGCGGAGGAGGTGGGCTGGAGGCCCCAGTGACCAACAGGCCCAGGGGAGTCAGGAGGTGGGGTGGACGGACCTGCAGGGACAGTGTCAGCGCTGAATGGGATGGAGAGCACAGGGAGCTGGGGCCGGGGGCAAGTCCACAGGGAGCTGGGGCCGGGGGTGAGACCATGGGGAGCTGGGCTGGGGCTGGGGGTGAGACCATGGGGAGCTGGGGCCGGGGGCTGGGACTAGTCCATGGGGAGCTGGGCTGGGGCTGGGGGTGAGTCCATGGGGAGCTGGGCTGGGGCTGGGGGTGAGACCATGGGGAGCTGGGCTGGGGCTGGGGGTGAGACCATGGGGAGCTGGGGCCGGGGGATGGGACTAGTCCATGGGGAGCTGGGCTGGGGCTGGGGGTGAGACCATGGGGAGCTGGGCTGGGGCTGGGACTAGTCCATGGGGAGCTGGGTCTGGAGCTGGGGGTGAGACCATGGGGAGCTGGGGCCGGGGGCTGCGACTAGTCCATGGGGAGCTGGGCTGGGGCTGGGGGTGAGTCCATGGGGAGCTGGGCTGGGGCTGGGGGTGAGTCCATGGGGAGCTGGGGCTGGGGCTGGGACTAGTCCATGGGCAGCTGGGCTGGGGCTGGGGGTGAGTCCATGGGGAGCTGGGCTGGGGCTGGGGGTGAGTCCATGGGGAGCTGGGCTGGGGTTGGGGGTGAGTCCATGGGGAGCTGGGCTGGGTCTCCTGGGGTTGCACCTGCACTCCTGTCTGCCCTTCCCTCTGCCGATGAAGCTCAGATCCCATGATAAGGAGGCACCTGCAGACCAGGGGTCCTGCACGGACAGCCCCAGAGGTGGACATTGAGGACTCGTAGGAGGACTTGGGTCTCATACGGCGGGTGGGGAGCAGGGCCCCTTCCTGGCTGAGGACACTTGGTGCTGTCCCCTCTCAAGGCTGTTTCCCCATCTGACAAAGGGGTCTCATGTGAGCCTCCCACCAAGTGAGTCGAGGAGGGCTGGCGCCACCCCCGTGGATTCGGAGTCCGTAAGAGGGGTGTCACCCGTCATGTCCCCACCCCGTGGGCACCTTCCCGTCTCTTGGAGGGTGGCCCATGGACATGAGTTCCTCACCCCGTGTCCCTCTTGGGGAAACAGGTTTCAGGAGCGATGGGTCTTGTAGCCTGGGACAGCCAGGCCACCTGGGTGCAGCAATGCCTGAAGGCCTCCTGGCACCGAGACAGGGGCAGGAGCAGATCCCACCAGCGGGAAGGTGGTGGGTTCTAGTGCTGGGATCCACCAGCTGACAGGTGGAGCTGCCAGTCTCCAGTGCTCAGCCCTCAGCGGGGCCTGCCTGGCAGCCCCACACACAGAGGGCATCGGGGTGGCGGGGGCACGTGTTACACGGGGGCCCTGGGTCTGAGTCATCCACTTCCTCCGAGTCTGGATGGGAGGACCCAGCGCCCCTCCTCCGCCCCCTCCTGATCTGGAAGCATAAATGGGGAGGGGAGAGCCCACTGGGTAGAAGGAACAGGGAGCGGCCAGGGTAAGTCCCCACTCTCAGAGACCCTGACATCAGCGTCACCTGGAGCAGAGTGGCCCAGCCTCAGACTCAGAGCACCAAGACCCAGGCCTGCAGGCCTGGACCCACCCCGGTCCCCCCGTCCCAGCTCCATTCTTCACCCCACAATCTGTAGCCCCCAGCCCTGCCCTGTGAGGCCCGGCCAGGCCCACGATGCTCCTCCTTGCTCCCCAGATGCTGAATCTGCTGCTGCTGGCGCTGCCCGTCCTGGCGAGCCGCGCCTACGCGGCCCCTGGTGAGTCCCAGCCGGGGTCCACCCTGCCCCTCACCACATTCCACAGGTCAGGGCCTGGGTGGGTTCTGGGGAGGTCGGGCTGGCCCCCACACAGGGAAGGGCTGGGCCCAGGCCTGGGGCTGCTTCCTGGTCCTGACCTGGCACCTGCCCCAGCCCCAGGCCAGGCCCTGCAGCGAGTGGGCATCGTTGGGGGTCAGGAGGCCCCCAGGAGCAAGTGGCCCTGGCAGGTGAGCCTGAGAGTCCGCGACCGATACTGGATGCACTTCTGCGGGGGCTCCCTCATCCACCCCCAGTGGGTGCTGACCGCAGCGCACTGCGTGGGACCGTGAGTCTCCCGGGGCCTGGAAGGGTGGGGAAGGGCTGGATGTGAGCCCTGGCTCCCGGGTGCTCCTGGGGGCTGCCCAGGGCCCTGAGTGGGATCCTCCGCTGCCCAGGGACGTCAAGGATCTGGCCGCCCTCAGGGTGCAACTGCGGGAGCAGCACCTCTACTACCAGGACCAGCTGCTGCCGGTCAGCAGGATCATCGTGCACCCACAGTTCTACACCGCCCAGATCGGAGCGGACATCGCCCTGCTGGAGCTGGAGGAGCCGGTGAACGTCTCCAGCCACGTCCACACGGTCACCCTGCCCCCTGCCTCAGAGACCTTCCCCCCGGGGATGCCGTGCTGGGTCACTGGCTGGGGCGATGTGGACAATGATGGTGGGTCTGGGGACAGTGGAGGTGGGGCCAGGGTCTTAGCCACAGCCCAGCCCCTGGGCTCCCTCTGGGCTCCAGGTGGGGGTTGCCCGGCCCCCTCCTGAGGCTGCACCCTCTTCCCCACCTGCAGAGCGCCTCCCACCGCCATTTCCTCTGAAGCAGGTGAAGGTCCCCATAATGGAAAACCACATTTGTGACGCAAAATACCACCTTGGCGCCTACACGGGAGACGACGTCCGCATCGTCCGTGACGACATGCTGTGTGCCGGGAACACCCGGAGGGACTCATGCCAGGTGGGCCCCGCCTGTCCCCCGCCCCCCGCCCCCCAACCCCCACTCCCAGGCCTGTTCGGCGAGCGCTGACCTCTGACCTTCCCAGGGCGACTCCGGAGGGCCCCTGGTGTGCAAGGTGAATGGCACCTGGCTGCAGGCGGGCGTGGTCAGCTGGGGCGAGGGCTGTGCCCAGCCCAACCGGCCTGGCATCTACACCCGTGTCACCTACTACTTGGACTGGATCCACCACTATGTCCCCAAAAAGCCGTGAGTCAGGCCTGGGGTGTCCACCTGGGTCACTGGAGAGCCAGCCCCTCCTGTCCAAAACACCACTGCTTCCTACCCAGGTGGCGACTGCCCCCCACACCTTCCCTGCCCCGTCCTGAGTGCCCCTTCCTGTCCTAAGCCCCCTGCTCTCTTCTGAGCCCCTTCCCCTGTCCTGAGGACCCTTCCCCATCCTGAGCCCCCTTCCCTGTCCTAAGCCTGACGCCTGCACCGGGCCCTCCGGCCCTCCCCTGCCCAGGCAGCTGGTGGTGGGCGCTAATCCTCCTGAGTGCTGGACCTCATTAAAGTGCATGGAAATCACTGGTGTGCATCGCTGTGTTTCTGGTTGTGGATGTCACTGGGAGAGAAGGGGTCCAGGTGTGCTGAGGACACCTGCCACAGTGTGAGGTCCTAGCCCTCAAGGCACAGCCAGTCACCGTGGGACGGGGCCTCCTGGGCAGCCCTGGTCCCCGAGGCTGGCTTCTCCCCACACGATGCATCCAGCATTCGGGTCACACAGAGCCACTCGGGCAACTCAGTTGATTATAAAGGACAGCCAGGTCCCTGCAACCGGGTCAAGACAGAGAATGGTCACCGGGAGCCCCAGGGCTGCCCATCACGAGCCCCTACCCCACGCTTCCCACGAGCTCTTCTCCCGGCCCCTCCGTCCACTGCTTGTGCTTTGCCTAGTTGTTTGCTTTGAGACGGGATCTCGCTGTGTCATCCAGGCTGAAGTGCAGTGGTGTGATCAGGGCTCACTGCAGCCTTAACTCCTGGGCTCAAGCGATCCTCCCATCTTGGCCTCCCATATAGCTGGGCCACAGGAGTGAGCCACCACGCCCAGTTAATTTTTGTATTTTCAGTAGAGATGGGGTTTCGCCATGTTGGCCAGTCTGGTCTCGAACTCCTGACCTCAAGTGATCCGCCCGCCTCGGCCTCCCAAAGTGCTGGGATGACAGGCGTGAGCCACCGCACCCGGCCTGAGTTTGACATTTTCAAATTCATTTTGAGGTCTTTCTCTACATCAATAGGTGAGCCCTCTGCGTCTGGCGAGTGTTGCATTTTATCCCGGGCTCTTGTTTGCATTTTATATTTGAACATGATTACACTCAGGAATGAAATGCGGGGCTGTTCTGGTTGAAAACAACTCTCTAAAGAAACATTCACTCTTTCCTTCCAACTGTTAGATGCAGAGATGTGCATTTAGTCTCCCGAATCTCTGCAAATGACCTCTGTCCTCACAAGGGGTGGACTCAACTCCCAGTGCCCTCTCCAGCCCCACGTGACCTCTGCCTCTGCAGCCCCTGAAGGCCCATCCCTCGGCTCCTGTTCTGCAGGCCCAGCGTCTTGTTAATGAAGATGGACCTGGAACTCGGGCCCTTCTTCCTCCCTCTGGCCCATCCCACCTTCTAGGGATCACAGAGACAGCACGGGGTGACCCCCAGGGAACACTGAGCCCCTAGAAGCACTTCCACACGCCCACTGGAGGTTTTGCGGGGTGGGAGTCGGAGGGATGAGACCCCGAAGGGAAGCAAGACGGCCCCTCAGGACAGGGCTGCCGGTGTAAGGAAAGGTGGACAGCAGGGGCCGGTCACTGGGTGGAGGGGGAGGGCGGGCTCCAGCCCCAGAGCTTCCCAAATTAGATCTAAGATCCCTGGGAAGCTCAGTGAAGCTCAGCCCAGTGACACTGGCAGATGTGAGCGTCAGCTTCAGCAGGAAGGGTCTCTCAGGACGTGGCAGGCAGGCTGCTGGCCAGGGCTGCAGCCACCTGCGTTTTGACTGGGACGGGGGCACCTGCTCCAAGGTCACCCACGTGGCTGCCGGCAGGAGGCCCTGGTTCCCCGTCACAGGGGGGTGTGAGGCGGAGGGCGAGTGGGGGGGACAGGGTTCCCACCGAGGGGACGGCACCCAGGTGGCCAGGCCACCGCAGACAGAAGCAATCCCAGGTCTCCCAGGGTCCTGGACAACAGGAGACCCCACCAAGCTGGGGGCAATCACCAGGGCCAGGCCCCCCTCCCGGTTCCTCAGTTGGCTCTCCTGTCCAATGGTGGGGGTGAACGGCACCATGTCACAGGACTGCTGGGGCTCAGGGGATGGTGCCTGAAGCTTCTTCCTCCCCAGCAGGCCTGCAATCTGGGTCGTGTGGAGCACTCTGCGGGGAGTGGCGTGCTGGGGCACAGGCAGAAAGACGGGGTCCCCAGTGCTGCAGGTGAATTGAGTTGGGACAGGTGAGGGCCCTGAAGTCCCCACCTGTGGGGACCTGGGGACAGCCCTAGAGGTCAGGACTAGAGGACCTGGTTCCATGAAGACCCTGCCCCTCA\n"
     ]
    }
   ],
   "source": [
    "entry_point(argv)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "026bf777",
   "metadata": {},
   "outputs": [],
   "source": [
    "#####################\n",
    "# code to read FASTA file\n",
    "#####################\n",
    "def fasta_parser(args= ['../data/407228326.fasta', '../data/407228412.fasta']):\n",
    "    \n",
    "    hre=re.compile('>(\\S+)')\n",
    "    lre=re.compile('^(\\S+)$')\n",
    "    seqs_dict = {}\n",
    "    \n",
    "    for i in range(len(args)):\n",
    "        f=open(args[i],'r')\n",
    "        lines=f.readlines()\n",
    "        \n",
    "        gene = {}\n",
    "        for line in lines:\n",
    "                outh = hre.search(line)\n",
    "                if outh:\n",
    "                        id=outh.group(1)\n",
    "                else:\n",
    "                        outl=lre.search(line)\n",
    "                        if(id in gene.keys()):\n",
    "                                gene[id] += outl.group(1)\n",
    "                        else:\n",
    "                                gene[id]  =outl.group(1)\n",
    "#         print(gene)                        \n",
    "        seqs_dict[\"Seq%s\" % (i+1)] = gene[id]\n",
    "        f.close()\n",
    "    return seqs_dict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "2685fd7f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Seqn",
       " 'Seq2': 'AGAATGGCGCAGCCACTTTGGAAGACAGTTTGGCAGTTTCTTACAAAGCTAAACATACTCTTACTATATGATCTAGCAATTGTGCTTCTAGGTATTTACTTACCCAAGGAGTTGAAAACTTATGCCCACACAAAAACCTGCACATGATGTTGATAGCATCTTTACCCATAATTGCCAAAAAGTTGAAGGAACCAAAGTGTCCTTCAAAAGGCGAATGGGTAGAACAACTGTGGTACATCCAGACAATGGAATATCATTCAGAGACAAAAAGCAATGAGCTGGCCGGGTGCGGTGTCTCATGCCTGTAATCCCAGCACTTTGGGAGGCTGAGGCGGGCGGACCATGTGGTCAGGAGATTGAGACCATCCTGGCTAACACAGTGAAAACCCATCTCTAAAAAAAAAAAAAAAAAACAACAGCTGGGCATGGTGGCAGGTGCCTGTAGTCCCAGCTACTCGGAGGCTGAGGCAGGAGAATGGCGTGAACCCGGGAGGCGCAGCTTGCAGTGAGCCGAGATCACACCACTGCACTCCAGCCTAGGAGACAGAGCGAGACTCTGTCTCAAAATAAATAAATAAATAAATAAATAAATAAATAAATAAATAAATAAAAGCAAGGAGCTATCAAGCCTTGAAAAGACATACAGGGGCCATAACTGCCTACTACTCAGTGAAAGAAGCTAGTCGGAAAAAGTTAATAGTGTATCGTTGATAGTGGATAAGTCAAAACTTCAGAGACAATGAAAATATCCGTGGTTTCCAGGGGATGGGGAGAGGGAGAGGCAGTGGAGCACGAGATTTTGAGGGCAGGGGATGTATTCCGCATAATACGGTAATGGTGGACACATGACTTGTGCACTTGCCACGACCCACAGAATGTACAACAGACAGAGTGAACCCTCATGTAAACTGTGGGAGTTCGTTAGTAATAATGTATCAATATTGTTCATCAGCTGTAACAATGCACCCACAGTAATGCAAAATGTTCATAACAGGAAACTCTGTGTGTGGGGATGTGTGTGTGGGGGGATACGATCTGTACTATCTGCCCAGTTGTCTGTAAACTTAAAACTGCTCTAAAAAATAAAGTGCATTAATTCCAAAACACCACAACTTCACGTGCAATTTCAACTTGCAACAGCCTGCTTTTAGTCTCCCCGGATCCTTCTGTTACTGTAGCACACGCCGCACCCTTGTGTATTCCATAAACCACACGATACCTGCACTCGCTTTGCTGTTGTTGCTTCAAACTGCCAATTCTCTTTCAAATATTTTTTGAGAGAGAAAACTGTCTTACACAGTCACAGCTGTTTCCATTTCCAGAGTTTATCTTCCCTTAGTCTAGGTCTAGATGTTCATCTCTTATCATCTTCTTCCTGCAGAACTTCCTTTCACATTTCTTTTTTTTTTTTTTTTTTTTTTTTTTGAGACGGAGTCTCCTTCATTGCCCAGGCTGGAGTGCAGTGGCGCCATCTCGGATCACGGCAAGCTCCGCCTCCCGGGTTCACGCCATTCTCCTGCCTCAGCCTCCCGAGTAGCTGGGACTACAGGTGCCCGCCACCACGCCCGGCTAATTTTTTGTATTTTTAGTAGAGACAGGGTTTCACTGTGTTAGCCAGGGGGGTCTCGAACTCCTGACCTCAGGTGATCCACCCGCCTTGGCCTCCCGAAGTGCTAGGATTACAGGCGTGAGCCACCGCGCCCAGCTAATTTTTGTATTTTTAGTAGAGATGGGGTTTCATCACGTTGGCCAGGCTGGTCTTGAACTCCTGACCTCAGGTGACCCAGCCGCCTCGGCCTCCCAAAGTGCTAGGATTACAGGCGTGAACCACCACGCCCGAACATGATTGATTTTTTTTATCGGGAGGTCATCCTTTTTCATGCCTGCTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTAGACACGGTATTGCTTTGTTGCCAGACTGGAGTGCAGTGGCACGATCTCGGCTCACTGCATCCTCTGACTCCCTGGTTCAAGCGATTCTCCTGCCTCAGCCTCCCGAGTAGCTGGGATTACAGGCACGTGCCACCACGCCCGGCTAATTTTTATATTTTTAGTAGAGACGGGGTTTCACCATGTGGGCCAGGCTGGTCTCGTTCTCCTGACCTCACGATCTGCCACCTCGGCCTCCCAAAGTGCTGGGATGACAGGCGTGAGCCACCGCGCCCGGCCACCCGCTCGTTCTTGACTAGCCCCCGGATCTCGTGAGTACTCTCTGGAGTGTTTTGTTGCGTGCTGGGTTGTGTTCTATTCCTTGACATCGTTTTGAGATGTGTTCTCACAGGCAGTTAAGTCACTTGCAATCATTTGGATCCGTCTGGGCTTTGCTTTTCAGCTTTGTGAGGGTGGGTCCGGAGAAGCCTTTGGTTTCGGGATTACTTTCTCCCCTCGTACCCTTCCATACCCTTCCGAGGACTCTCCAGTGCCTGCCTCTGACAAGGTTTCTCCACTCAGCTGCTGGGAACACGCGATATCCCCAGCCCCGCGCGCACTCCCGGACTCCGCCCCTCTCATCTGGTGGTTCTCGTTTCCGACGCGGCTCCCACGTCTCTCTGCATCTCCGGCACTCGGCCGAGGACGCCGGGGGGAACCCCCTGCGGATGCCCGGAGCTCTCCGTGCAGTTCTCCGCCTCGTGAGTCATGGCTGCCGGGGCCTCTGCACGCGCCAGGTGCGTCTCCCCAGCCCAGCAAGCTCCTGGGGCTGAGTTTCCCATCGCTGCCCTGAGTCTGGGCGCGGCCACTGTCGTCTCACCCGACTCCCCACCCTTCTCTCGGGGACACTGCCCCACGTGGCCTCTTGCCCAGTGTCTGTCAATGGCCTGGGACCCCAGCCCTGCAGCAGCCCCAGGGGAGCGGCCGGGGATCGGGGCGGGGTGCCCAGGACGCGCCCTGATTGGCCCAGTGTTAGCCAATCAAGGCTCTCGCATCCCCATGGTGCTGATTGGTCCGCCTCCCAGGCCTGACCCAATCGGAGCATTCCTAGGAGGAGCGGCCCCAGAGCCCCTGACTCGGGGGTCCCAGAGCCCTCTGCACACCACAGCCCCGGTGTCCCCGTGTGTCCCTGGGTTCTCCCAGCCCTGGTGTCCCCTGAGTCTCTTCTTCACCGTCAGCCCTGGTGTCTCCCGTGTCCCTGCCACACCCTCATCCCTGGTGTCCCCCGTCACCCCATCCCCTCACCTCCTGGGCTCCTGAAGGTCCCATCTTGTGGGCCTCATTCATGGAACCAGGACGGGGCAGGTGGAGGCCTCTGGGGAGTTTGTCCAGAGAATGGAGGAGAAGCAGGGTCATGAGCAGGAGCGGTCTGGGCCACCCCTGCCTGTCCCCCGGGGGGTGCAGCCCGGAAGGAGTCCAGATGCATATGGCCCCGCAGTGCAGAGTCAGCCCCAAACCAGGCTGGTCCCAGGCAGGGTGGGGGCAGGAGGAGCCCTGGAGTGGCCCTGTGTTGGGGGTCGGGGGGCAGGCAGGGGGTCCTGGGGCTCAGAAGCGGAGGAGGTGGGCTGGAGGCCCCAGTGACCAACAGGCCCAGGGGAGTCAGGAGGTGGGGTGGACGGACCTGCAGGGACAGTGTCAGCGCTGAATGGGATGGAGAGCACAGGGAGCTGGGGCCGGGGGCAAGTCCACAGGGAGCTGGGGCCGGGGGTGAGACCATGGGGAGCTGGGCTGGGGCTGGGGGTGAGACCATGGGGAGCTGGGGCCGGGGGCTGGGACTAGTCCATGGGGAGCTGGGCTGGGGCTGGGGGTGAGTCCATGGGGAGCTGGGCTGGGGCTGGGGGTGAGACCATGGGGAGCTGGGCTGGGGCTGGGGGTGAGACCATGGGGAGCTGGGGCCGGGGGATGGGACTAGTCCATGGGGAGCTGGGCTGGGGCTGGGGGTGAGACCATGGGGAGCTGGGCTGGGGCTGGGACTAGTCCATGGGGAGCTGGGTCTGGAGCTGGGGGTGAGACCATGGGGAGCTGGGGCCGGGGGCTGCGACTAGTCCATGGGGAGCTGGGCTGGGGCTGGGGGTGAGTCCATGGGGAGCTGGGCTGGGGCTGGGGGTGAGTCCATGGGGAGCTGGGGCTGGGGCTGGGACTAGTCCATGGGCAGCTGGGCTGGGGCTGGGGGTGAGTCCATGGGGAGCTGGGCTGGGGCTGGGGGTGAGTCCATGGGGAGCTGGGCTGGGGTTGGGGGTGAGTCCATGGGGAGCTGGGCTGGGTCTCCTGGGGTTGCACCTGCACTCCTGTCTGCCCTTCCCTCTGCCGATGAAGCTCAGATCCCATGATAAGGAGGCACCTGCAGACCAGGGGTCCTGCACGGACAGCCCCAGAGGTGGACATTGAGGACTCGTAGGAGGACTTGGGTCTCATACGGCGGGTGGGGAGCAGGGCCCCTTCCTGGCTGAGGACACTTGGTGCTGTCCCCTCTCAAGGCTGTTTCCCCATCTGACAAAGGGGTCTCATGTGAGCCTCCCACCAAGTGAGTCGAGGAGGGCTGGCGCCACCCCCGTGGATTCGGAGTCCGTAAGAGGGGTGTCACCCGTCATGTCCCCACCCCGTGGGCACCTTCCCGTCTCTTGGAGGGTGGCCCATGGACATGAGTTCCTCACCCCGTGTCCCTCTTGGGGAAACAGGTTTCAGGAGCGATGGGTCTTGTAGCCTGGGACAGCCAGGCCACCTGGGTGCAGCAATGCCTGAAGGCCTCCTGGCACCGAGACAGGGGCAGGAGCAGATCCCACCAGCGGGAAGGTGGTGGGTTCTAGTGCTGGGATCCACCAGCTGACAGGTGGAGCTGCCAGTCTCCAGTGCTCAGCCCTCAGCGGGGCCTGCCTGGCAGCCCCACACACAGAGGGCATCGGGGTGGCGGGGGCACGTGTTACACGGGGGCCCTGGGTCTGAGTCATCCACTTCCTCCGAGTCTGGATGGGAGGACCCAGCGCCCCTCCTCCGCCCCCTCCTGATCTGGAAGCATAAATGGGGAGGGGAGAGCCCACTGGGTAGAAGGAACAGGGAGCGGCCAGGGTAAGTCCCCACTCTCAGAGACCCTGACATCAGCGTCACCTGGAGCAGAGTGGCCCAGCCTCAGACTCAGAGCACCAAGACCCAGGCCTGCAGGCCTGGACCCACCCCGGTCCCCCCGTCCCAGCTCCATTCTTCACCCCACAATCTGTAGCCCCCAGCCCTGCCCTGTGAGGCCCGGCCAGGCCCACGATGCTCCTCCTTGCTCCCCAGATGCTGAATCTGCTGCTGCTGGCGCTGCCCGTCCTGGCGAGCCGCGCCTACGCGGCCCCTGGTGAGTCCCAGCCGGGGTCCACCCTGCCCCTCACCACATTCCACAGGTCAGGGCCTGGGTGGGTTCTGGGGAGGTCGGGCTGGCCCCCACACAGGGAAGGGCTGGGCCCAGGCCTGGGGCTGCTTCCTGGTCCTGACCTGGCACCTGCCCCAGCCCCAGGCCAGGCCCTGCAGCGAGTGGGCATCGTTGGGGGTCAGGAGGCCCCCAGGAGCAAGTGGCCCTGGCAGGTGAGCCTGAGAGTCCGCGACCGATACTGGATGCACTTCTGCGGGGGCTCCCTCATCCACCCCCAGTGGGTGCTGACCGCAGCGCACTGCGTGGGACCGTGAGTCTCCCGGGGCCTGGAAGGGTGGGGAAGGGCTGGATGTGAGCCCTGGCTCCCGGGTGCTCCTGGGGGCTGCCCAGGGCCCTGAGTGGGATCCTCCGCTGCCCAGGGACGTCAAGGATCTGGCCGCCCTCAGGGTGCAACTGCGGGAGCAGCACCTCTACTACCAGGACCAGCTGCTGCCGGTCAGCAGGATCATCGTGCACCCACAGTTCTACACCGCCCAGATCGGAGCGGACATCGCCCTGCTGGAGCTGGAGGAGCCGGTGAACGTCTCCAGCCACGTCCACACGGTCACCCTGCCCCCTGCCTCAGAGACCTTCCCCCCGGGGATGCCGTGCTGGGTCACTGGCTGGGGCGATGTGGACAATGATGGTGGGTCTGGGGACAGTGGAGGTGGGGCCAGGGTCTTAGCCACAGCCCAGCCCCTGGGCTCCCTCTGGGCTCCAGGTGGGGGTTGCCCGGCCCCCTCCTGAGGCTGCACCCTCTTCCCCACCTGCAGAGCGCCTCCCACCGCCATTTCCTCTGAAGCAGGTGAAGGTCCCCATAATGGAAAACCACATTTGTGACGCAAAATACCACCTTGGCGCCTACACGGGAGACGACGTCCGCATCGTCCGTGACGACATGCTGTGTGCCGGGAACACCCGGAGGGACTCATGCCAGGTGGGCCCCGCCTGTCCCCCGCCCCCCGCCCCCCAACCCCCACTCCCAGGCCTGTTCGGCGAGCGCTGACCTCTGACCTTCCCAGGGCGACTCCGGAGGGCCCCTGGTGTGCAAGGTGAATGGCACCTGGCTGCAGGCGGGCGTGGTCAGCTGGGGCGAGGGCTGTGCCCAGCCCAACCGGCCTGGCATCTACACCCGTGTCACCTACTACTTGGACTGGATCCACCACTATGTCCCCAAAAAGCCGTGAGTCAGGCCTGGGGTGTCCACCTGGGTCACTGGAGAGCCAGCCCCTCCTGTCCAAAACACCACTGCTTCCTACCCAGGTGGCGACTGCCCCCCACACCTTCCCTGCCCCGTCCTGAGTGCCCCTTCCTGTCCTAAGCCCCCTGCTCTCTTCTGAGCCCCTTCCCCTGTCCTGAGGACCCTTCCCCATCCTGAGCCCCCTTCCCTGTCCTAAGCCTGACGCCTGCACCGGGCCCTCCGGCCCTCCCCTGCCCAGGCAGCTGGTGGTGGGCGCTAATCCTCCTGAGTGCTGGACCTCATTAAAGTGCATGGAAATCACTGGTGTGCATCGCTGTGTTTCTGGTTGTGGATGTCACTGGGAGAGAAGGGGTCCAGGTGTGCTGAGGACACCTGCCACAGTGTGAGGTCCTAGCCCTCAAGGCACAGCCAGTCACCGTGGGACGGGGCCTCCTGGGCAGCCCTGGTCCCCGAGGCTGGCTTCTCCCCACACGATGCATCCAGCATTCGGGTCACACAGAGCCACTCGGGCAACTCAGTTGATTATAAAGGACAGCCAGGTCCCTGCAACCGGGTCAAGACAGAGAATGGTCACCGGGAGCCCCAGGGCTGCCCATCACGAGCCCCTACCCCACGCTTCCCACGAGCTCTTCTCCCGGCCCCTCCGTCCACTGCTTGTGCTTTGCCTAGTTGTTTGCTTTGAGACGGGATCTCGCTGTGTCATCCAGGCTGAAGTGCAGTGGTGTGATCAGGGCTCACTGCAGCCTTAACTCCTGGGCTCAAGCGATCCTCCCATCTTGGCCTCCCATATAGCTGGGCCACAGGAGTGAGCCACCACGCCCAGTTAATTTTTGTATTTTCAGTAGAGATGGGGTTTCGCCATGTTGGCCAGTCTGGTCTCGAACTCCTGACCTCAAGTGATCCGCCCGCCTCGGCCTCCCAAAGTGCTGGGATGACAGGCGTGAGCCACCGCACCCGGCCTGAGTTTGACATTTTCAAATTCATTTTGAGGTCTTTCTCTACATCAATAGGTGAGCCCTCTGCGTCTGGCGAGTGTTGCATTTTATCCCGGGCTCTTGTTTGCATTTTATATTTGAACATGATTACACTCAGGAATGAAATGCGGGGCTGTTCTGGTTGAAAACAACTCTCTAAAGAAACATTCACTCTTTCCTTCCAACTGTTAGATGCAGAGATGTGCATTTAGTCTCCCGAATCTCTGCAAATGACCTCTGTCCTCACAAGGGGTGGACTCAACTCCCAGTGCCCTCTCCAGCCCCACGTGACCTCTGCCTCTGCAGCCCCTGAAGGCCCATCCCTCGGCTCCTGTTCTGCAGGCCCAGCGTCTTGTTAATGAAGATGGACCTGGAACTCGGGCCCTTCTTCCTCCCTCTGGCCCATCCCACCTTCTAGGGATCACAGAGACAGCACGGGGTGACCCCCAGGGAACACTGAGCCCCTAGAAGCACTTCCACACGCCCACTGGAGGTTTTGCGGGGTGGGAGTCGGAGGGATGAGACCCCGAAGGGAAGCAAGACGGCCCCTCAGGACAGGGCTGCCGGTGTAAGGAAAGGTGGACAGCAGGGGCCGGTCACTGGGTGGAGGGGGAGGGCGGGCTCCAGCCCCAGAGCTTCCCAAATTAGATCTAAGATCCCTGGGAAGCTCAGTGAAGCTCAGCCCAGTGACACTGGCAGATGTGAGCGTCAGCTTCAGCAGGAAGGGTCTCTCAGGACGTGGCAGGCAGGCTGCTGGCCAGGGCTGCAGCCACCTGCGTTTTGACTGGGACGGGGGCACCTGCTCCAAGGTCACCCACGTGGCTGCCGGCAGGAGGCCCTGGTTCCCCGTCACAGGGGGGTGTGAGGCGGAGGGCGAGTGGGGGGGACAGGGTTCCCACCGAGGGGACGGCACCCAGGTGGCCAGGCCACCGCAGACAGAAGCAATCCCAGGTCTCCCAGGGTCCTGGACAACAGGAGACCCCACCAAGCTGGGGGCAATCACCAGGGCCAGGCCCCCCTCCCGGTTCCTCAGTTGGCTCTCCTGTCCAATGGTGGGGGTGAACGGCACCATGTCACAGGACTGCTGGGGCTCAGGGGATGGTGCCTGAAGCTTCTTCCTCCCCAGCAGGCCTGCAATCTGGGTCGTGTGGAGCACTCTGCGGGGAGTGGCGTGCTGGGGCACAGGCAGAAAGACGGGGTCCCCAGTGCTGCAGGTGAATTGAGTTGGGACAGGTGAGGGCCCTGAAGTCCCCACCTGTGGGGACCTGGGGACAGCCCTAGAGGTCAGGACTAGAGGACCTGGTTCCATGAAGACCCTGCCCCTCA'}"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fasta_parser()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "100ec46f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

**********************************************************************

Testing align_seqs_better.ipynb...

======================================================================
Inspecting script file debugme.py...

File contents are:

**********************************************************************
"""This script is used for debugging"""\

__appname__ = "debugme.py"

import ipdb; ipdb.set_trace()

def buggyfunc(x):
    """This function uses 'try' for debugging."""
    y = x
    for i in range(x):
        try:
            y = y - 1
            z = x/y
        except ZeroDivisionError:
            print(f"The result of dividing a number by zero is undefined")
        except:
            print(f"This didn't work; {x = }; {y = }")
        else:
            print(f"OjbK;{x = }; {y = }, {z = };")
    return z

buggyfunc(20)
**********************************************************************

Testing debugme.py...

debugme.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 


**********************************************************************
> [1;32m/home/mhasoba/Documents/Teaching/IC_CMEE/2022-23/Coursework/StudentRepos/XuanWang_/Week2/code/debugme.py[0m(7)[0;36m<module>[1;34m()[0m
[1;32m      6 [1;33m[1;33m[0m[0m
[0m[1;32m----> 7 [1;33m[1;32mdef[0m [0mbuggyfunc[0m[1;33m([0m[0mx[0m[1;33m)[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[0m[1;32m      8 [1;33m    [1;34m"""This function uses 'try' for debugging."""[0m[1;33m[0m[1;33m[0m[0m
[0m
ipdb> 

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Traceback (most recent call last):
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2022-23/Coursework/StudentRepos/XuanWang_/Week2/code/debugme.py", line 7, in <module>
    def buggyfunc(x):
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2022-23/Coursework/StudentRepos/XuanWang_/Week2/code/debugme.py", line 7, in <module>
    def buggyfunc(x):
  File "/usr/lib/python3.10/bdb.py", line 90, in trace_dispatch
    return self.dispatch_line(frame)
  File "/usr/lib/python3.10/bdb.py", line 115, in dispatch_line
    if self.quitting: raise BdbQuit
bdb.BdbQuit

If you suspect this is an IPython 7.31.1 bug, please report it at:
    https://github.com/ipython/ipython/issues
or send an email to the mailing list at ipython-dev@python.org

You can print a more detailed traceback right now with "%tb", or use "%debug"
to interactively debug it.

Extra-detailed tracebacks for bug-reporting purposes can be enabled via:
    %config Application.verbose_crash=True


======================================================================
Inspecting script file lc2.py...

File contents are:

**********************************************************************
"""some generation about the rainfall value for each month"""

__appname__ = "lc2.py"

rainfall = (('JAN',111.4),
            ('FEB',126.1),
            ('MAR', 49.9),
            ('APR', 95.3),
            ('MAY', 71.8),
            ('JUN', 70.2),
            ('JUL', 97.1),
            ('AUG',140.2),
            ('SEP', 27.0),
            ('OCT', 89.4),
            ('NOV',128.4),
            ('DEC',142.2),
           )


# Step 1: Monthes and rainfall values when the amount of rain was greater than 100mm:
great_rainfall = [i for i in rainfall if i[1] > 100]

# Step 2: Months when the amount of rain is less than 50 mm
months = [i[0] for i in rainfall if i[1] < 50]

# Step 3: Conventional loops
great_rainfall1 = []
for i in rainfall:
    if i[1] > 100:
        great_rainfall1.append(i)
print(great_rainfall)

months1 = []
for i in rainfall:
    if i[1] < 50:
        months1.append(i[0])
        print(months1)



**********************************************************************

Testing lc2.py...

lc2.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 100

Output (only first 500 characters): 


**********************************************************************
[('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
['MAR']
['MAR', 'SEP']

**********************************************************************

Code ran without errors

Time consumed = 0.02247s

======================================================================
Inspecting script file align_seqs_fasta.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3


"""
Script to align two sequences after taking an input from user.
It outputs one one best alignment in .csv format. 
If no input is provided the script will run with default arguements.
All individual functions can work independently!
Enjoy!
Author: Aditi Madkaikar arm122@ic.ac.uk
Script: align_seqs_fasta.py
Descripton: Finding sequence alignment score for two fasta files
Arguements: Ideally two input fasta files. Can work without any.
Date: Dec 2022
"""

__author__ = 'Aditi Madkaiakr (arm122@ic.ac.uk)'
__version__ = '0.0.1'
__license__ = 'None'



import sys
import csv
import re

# Main entry point of the script. 
def entry_point(argv='abc'):
    """
    The main entry function of the script. Takes arguements from the system or user. 
    When called independently, it will work only with names of two fasta files are arguements. 
    Else it will continue with defaults
    """
    if len(argv) != 3:
        print("Too few or too many arguements...")
        print("Continuing with defaults..")
        seq1, seq2 = fasta_parser().values()
    else:
        try:
            arg1 = argv[1]
            arg2 = argv[2]
            re.search(r'\w+\.fasta\s\w+\.fasta', arg1 + " " + arg2).group()
            print("Good arguements given. Will continue with these.")
            seq1, seq2 = fasta_parser().values()
        except:
            print("Going back to defaults since wrong input was given")
            seq1, seq2 = fasta_parser().values()
    req = seq_order(seq1, seq2)
    
    return 0


#####################
# code to read FASTA file
#####################
def fasta_parser(args= ['../data/407228326.fasta', '../data/407228412.fasta']):
    """ 
    This is a Fasta parser. Parses Fasta files and returns a dictionary of parsed files.
    This function can take any number of inputs. If none are given it will proceed with defaults.
    """
    hre=re.compile('>(\S+)')
    lre=re.compile('^(\S+)$')
    seqs_dict = {}
    
    for i in range(len(args)):
        f=open(args[i],'r')
        lines=f.readlines()
        
        gene = {}
        for line in lines:
                outh = hre.search(line)
                if outh:
                        id=outh.group(1)
                else:
                        outl=lre.search(line)
                        if(id in gene.keys()):
                                gene[id] += outl.group(1)
                        else:
                                gene[id]  =outl.group(1)
        seqs_dict["Seq%s" % (i+1)] = gene[id]
        f.close()
    return seqs_dict

# Function to calcualte score at every point
def calculate_score(s1='ATCGA', s2='ATCG', l1=5, l2=4, startpoint=0):
    """
    This function calculates the best source when s1, s2, l1, l2 and the startpoint are provided. 
    It aligns the shorter sequence at the startpoint location of the longer sequence and calculates the number of matching base pairs
    If you want to import this function as a module, assign the longer sequence s1, and the shorter to s2. 
    l1 is length of the longest, l2 that of the shortest.
    It has default arguements.
    """
    
    matched = "" # to hold string displaying alignements
    score = 0
    #import ipdb; ipdb.set_trace()
    for i in range(l2):
        if (i + startpoint) < l1:
            if s1[i + startpoint] == s2[i]: # if the bases match
                matched = matched + "*"
                score = score + 1
            else:
                matched = matched + "-"
    return score

# Function to order the given sequences by length
def seq_order(seq1='ATCG', seq2='ATCGA'):
    """
    Orders sequences in terms based on their lengths. 
    It takes two arguements and returns the ordered sequences and their lengths. 
    """
    l1 = len(seq1)
    l2 = len(seq2)
    if l1 >= l2:
        s1 = seq1
        s2 = seq2
    else:
        s1 = seq2
        s2 = seq1
        l1, l2 = l2, l1 # swap the two lengths
    
    if __name__ == '__main__':
        my_best_align = None
        my_best_score = -1

        for i in range(l1): # Note that you just take the last alignment with the highest score
            z = calculate_score(s1, s2, l1, l2, i)
            if z > my_best_score:
                my_best_align = "." * i + s1 # think about what this is doing!
                my_best_score = z 

        list_to_save = [my_best_align, s1, 'Best score: ', my_best_score]

        f = open('../results/best_align.txt', 'w+')
        for i in list_to_save:
            f.write(str(i) + '\n')
        f.close() 
    else:
        choice = input("Do you want to continue to calculating alignment score? [y/n]")
        print("Thie choice you made is", choice)
        
        if choice.lower() == "y":
            my_best_align = None
            my_best_score = -1

            for i in range(l1): # Note that you just take the last alignment with the highest score
                z = calculate_score(s1, s2, l1, l2, i)
                if z > my_best_score:
                    my_best_align = "." * i + s1 # think about what this is doing!
                    my_best_score = z 
            return my_best_align, s1, my_best_score

        else:
            return "The ordered sequences and their lengths are:", s1, s2, l1, l2
    return 0

# Main thingy
if __name__ == '__main__':
    """Makes sure the main function is called from the command line"""
    status = entry_point(sys.argv)
    sys.exit(status)

**********************************************************************

Testing align_seqs_fasta.py...

align_seqs_fasta.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 


**********************************************************************
Too few or too many arguements...
Continuing with defaults..

**********************************************************************

Code ran without errors

Time consumed = 2.68765s

======================================================================
Inspecting script file control_flow.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Description of this program or application.
You can use several lines"""

__author__ = 'Xuan Wang (xuan.wang22@email.address)'
__version__ = '0.0.1'
__license__ = "License for this code/program"

## imports ##
import sys # module to interface our program with the operating system

## constants ##

def even_or_odd(x=0): # if not specified, x should take value 0.

    """Find whether a number x is even or odd."""
    if x%2 == 0:
        return f"{x} is Even!"
    return f"{x} is Odd!"

def largest_divisor_five(x=120):
    """Find which is the largest divisor of x among 2,3,4,5."""
    largest = 0
    if x % 5 == 0:
        largest = 5
    elif x % 4 == 0:
        largest = 4
    elif x % 3 == 0:
        largest == 3
    elif x % 2 == 0:
        largest = 2
    else:
        return f"No divisor found for {x}!"
    return f"The largest divisor of {x} is {largest}"

def is_prime(x=70):
    """Find whether an integer is prime."""
    for i in range(2,x):
        if x % i == 0:
            print(f"{x} is not a prime: {i} is a divisor")
            return False
    print(f"{x} is a prime!")
    return True

def find_all_primes(x=22):
    """Find all the primes up to x"""
    allprimes = []
    for i in range(2, x + 1):
        if is_prime(i):
            allprimes.append(i)
    print(f"There are {len(allprimes)} primes between 2 and {x}")
    return allprimes

def main(argv):
    """Defines the main function"""
    print(even_or_odd(22))
    print(even_or_odd(33))
    print(largest_divisor_five(120))
    print(largest_divisor_five(121))
    print(is_prime(60))
    print(is_prime(59))
    print(find_all_primes(100))
    return 0

if (__name__ == "__main__"):
    status = main(sys.argv)
    sys.exit(status)

**********************************************************************

Testing control_flow.py...

control_flow.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 


**********************************************************************
22 is Even!
33 is Odd!
The largest divisor of 120 is 5
No divisor found for 121!
60 is not a prime: 2 is a divisor
False
59 is a prime!
True
2 is a prime!
3 is a prime!
4 is not a prime: 2 is a divisor
5 is a prime!
6 is not a prime: 2 is a divisor
7 is a prime!
8 is not a prime: 2 is a divisor
9 is not a prime: 3 is a divisor
10 is not a prime: 2 is a divisor
11 is a prime!
12 is not a prime: 2 is a divisor
13 is a prime!
14 is not a prime: 2 is a divisor
15 is not a prime: 3 is a divisor
16 is 
**********************************************************************

Code ran without errors

Time consumed = 0.02388s

======================================================================
Inspecting script file loops.py...

File contents are:

**********************************************************************
"""This file contains several loops."""

__appname__ = "loops.py"

for i in range(5):
    print(i)

my_list = [0,2,"geronimo!",3.0,True,False]

for k in my_list:
    print(k)

total = 0
summands = [0,1,11,111,1111]
for s in summands:
    total = total + s
    print(total)

z = 0
while z < 100:
    z = z + 1
    print(z)


**********************************************************************

Testing loops.py...

loops.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 100

Output (only first 500 characters): 


**********************************************************************
0
1
2
3
4
0
2
geronimo!
3.0
True
False
0
1
12
123
1234
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100

**********************************************************************

Code ran without errors

Time consumed = 0.02145s

======================================================================
Inspecting script file basic_io3.py...

File contents are:

**********************************************************************
"""Stores objects using the pickle package"""

__appname__ = "basic_io3.py"

#############################
# STORING OBJECTS
#############################
# To save an object (even complex) for later use
my_dictionary = {"a key": 10, "another key": 11}

import pickle

f = open('../sandbox/testp.p','wb') ## note the b: accept binary files
pickle.dump(my_dictionary, f)
f.close()

## Load the data again
f = open('../sandbox/testp.p','rb')
another_dictionary = pickle.load(f)
f.close()

print(another_dictionary)

**********************************************************************

Testing basic_io3.py...

basic_io3.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 100

Output (only first 500 characters): 


**********************************************************************
{'a key': 10, 'another key': 11}

**********************************************************************

Code ran without errors

Time consumed = 0.02383s

======================================================================
Inspecting script file cfexercises1.py...

File contents are:

**********************************************************************
"""Defines several functions"""

__appname__ = "cfexercises1.py"

from re import L
import sys

def foo_1(x):
    """returns the square root of the input"""
    return x ** 0.5

def foo_2(x, y):
    """returns the input with larger value"""
    if x > y:
        return x
    return y

def foo_3(x, y, z):
    """exchanges the value"""
    if x > y:
        tmp = y
        y = x
        x = tmp
    if y > z:
        tmp = z
        z = y
        y = tmp
    return [x,y,z]

def foo_4(x):
    """returns the '!' of the input number"""
    result = 1
    for i in range(1,x+1):
        result = result * i
    return result

def foo_5(x):
    """same as the previous function"""
    if x == 1:
        return 1
    return x * foo_5(x - 1)

def foo_6(x):
    """same as the previous function"""
    facto = 1
    while x >= 1:
        facto = facto * x
        x = x - 1
    return facto

def main(argv):
    """defines the main entrance, which prints the results of the functions"""
    print(foo_1(1))
    print(foo_2(2,1))
    print(foo_2(1,2))
    print(foo_3(3,2,1))
    print(foo_3(2,3,1))
    print(foo_3(3,1,2))
    print(foo_3(1,2,3))
    print(foo_4(1))
    print(foo_5(1))
    print(foo_5(10))
    print(foo_6(1))
    return 0

if __name__ == "__main__":
    # checks whether it is the main entrance
    status = main(sys.argv)
    sys.exit(status)
**********************************************************************

Testing cfexercises1.py...

cfexercises1.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 


**********************************************************************
1.0
2
2
[2, 1, 3]
[2, 1, 3]
[1, 2, 3]
[1, 2, 3]
1
1
3628800
1

**********************************************************************

Code ran without errors

Time consumed = 0.02230s

======================================================================
Inspecting script file oaks.py...

File contents are:

**********************************************************************
"""
In-class exercise which finds just those taxa that are oaks trees from a list of species.
"""

__appname__ = "oaks.py"

taxa = ['Quercus robur','Fraxus excelsior', 'Pinus sylvestris','Quercus cerris', 'Quercus petraea']
def is_an_oak(name):
    """defines the function which checks if the name starts with quercus"""
    return name.lower().startswith('quercus')

##Using for loops
oaks_loops = set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species)
print(oaks_loops)

#Using list comprehensions
oaks_lc = set([species for species in taxa if is_an_oak(species)])
print(oaks_lc)

#Get names in UPPER CASE using for loops
oaks_loops = set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species.upper())
print(oaks_loops)

#Get names in UPPER CASE using list comprehensions
oaks_lc = set([species.upper for species in taxa if is_an_oak(species)])
print(oaks_lc)
**********************************************************************

Testing oaks.py...

oaks.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 


**********************************************************************
{'Quercus robur', 'Quercus petraea', 'Quercus cerris'}
{'Quercus robur', 'Quercus petraea', 'Quercus cerris'}
{'QUERCUS ROBUR', 'QUERCUS CERRIS', 'QUERCUS PETRAEA'}
{<built-in method upper of str object at 0x7f80bf5d9db0>, <built-in method upper of str object at 0x7f80bf4c3430>, <built-in method upper of str object at 0x7f80bf4c34b0>}

**********************************************************************

Code ran without errors

Time consumed = 0.02469s

======================================================================
Inspecting script file align_seqs_better.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""
Script to align two sequences after taking an input from user.
It saves all the best alignments in binary format.
If no input is provided the script will run with default arguements.
All individual functions can work independently!
Enjoy!
Author: Aditi Madkaikar arm122@ic.ac.uk
Script: align_seqs_fasta.py
Descripton: Finding sequence alignment score for two fasta files
Arguements: Ideally two input fasta files. Can work without any.
Date: Dec 2022
"""

__author__ = 'Aditi Madkaiakr (arm122@ic.ac.uk)'
__version__ = '0.0.1'
__license__ = 'None'



import sys
import csv
import re
import pickle 

# Main entry point of the script. 
def entry_point(argv='abc'):
    """
    The main entry function of the script. Takes arguements from the system or user. 
    When called independently, it will work only with names of two fasta files are arguements. 
    Else it will continue with defaults
    """
    if len(argv) != 3:
        print("Too few or too many arguements...")
        print("Continuing with defaults..")
        seq1, seq2 = fasta_parser().values()
    else:
        try:
            arg1 = argv[1]
            arg2 = argv[2]
            re.search(r'\w+\.fasta\s\w+\.fasta', arg1 + " " + arg2).group()
            print("Good arguements given. Will continue with these.")
            seq1, seq2 = fasta_parser().values()
        except:
            print("Going back to defaults since wrong input was given")
            seq1, seq2 = fasta_parser().values()
    req = seq_order(seq1, seq2)
    
    return 0


#####################
# code to read FASTA file
#####################
def fasta_parser(args= ['../data/407228326.fasta', '../data/407228412.fasta']):
    """ 
    This is a Fasta parser. Parses Fasta files and returns a dictionary of parsed files.
    This function can take any number of inputs. If none are given it will proceed with defaults.
    """
    hre=re.compile('>(\S+)')
    lre=re.compile('^(\S+)$')
    seqs_dict = {}
    
    for i in range(len(args)):
        f=open(args[i],'r')
        lines=f.readlines()
        
        gene = {}
        for line in lines:
                outh = hre.search(line)
                if outh:
                        id=outh.group(1)
                else:
                        outl=lre.search(line)
                        if(id in gene.keys()):
                                gene[id] += outl.group(1)
                        else:
                                gene[id]  =outl.group(1)
        seqs_dict["Seq%s" % (i+1)] = gene[id]
        f.close()
    return seqs_dict

# Function to calcualte score at every point
def calculate_score(s1='ATCGA', s2='ATCG', l1=5, l2=4, startpoint=0):
    """
    This function calculates the best source when s1, s2, l1, l2 and the startpoint are provided. 
    It aligns the shorter sequence at the startpoint location of the longer sequence and calculates the number of matching base pairs
    If you want to import this function as a module, assign the longer sequence s1, and the shorter to s2. 
    l1 is length of the longest, l2 that of the shortest.
    It has default arguements.
    """
    
    matched = "" # to hold string displaying alignements
    score = 0
    #import ipdb; ipdb.set_trace()
    for i in range(l2):
        if (i + startpoint) < l1:
            if s1[i + startpoint] == s2[i]: # if the bases match
                matched = matched + "*"
                score = score + 1
            else:
                matched = matched + "-"
    return score

# Function to order the given sequences by length
def seq_order(seq1='ATCG', seq2='ATCGA'):
    """
    Orders sequences in terms based on their lengths. 
    It takes two arguements and returns the ordered sequences and their lengths. 
    """
    l1 = len(seq1)
    l2 = len(seq2)
    if l1 >= l2:
        s1 = seq1
        s2 = seq2
    else:
        s1 = seq2
        s2 = seq1
        l1, l2 = l2, l1 # swap the two lengths
    
    if __name__ == '__main__':
        my_best_align = None
        my_best_score = -1
        dict_to_save = dict()

        for i in range(l1): # Note that you just take the last alignment with the highest score
            z = calculate_score(s1, s2, l1, l2, i)
            if z >= my_best_score:
                my_best_align = "." * i + s1 # think about what this is doing!
                my_best_score = z
                num = i  
                list_to_save = [my_best_align, s1, 'Best score: ', my_best_score]
            dict_to_save[num] = list_to_save

        f = open('../results/better_aligned_seqs.p', 'wb')
        pickle.dump(dict_to_save, f)
        f.close()

    else:
        choice = input("Do you want to continue to calculating alignment score? [y/n]")
        print("Thie choice you made is", choice)
        
        if choice.lower() == "y":
            my_best_align = None
            my_best_score = -1
            dict_to_save = dict()
   
            for i in range(l1): # Note that you just take the last alignment with the highest score
                z = calculate_score(s1, s2, l1, l2, i)
                if z > my_best_score:
                    my_best_align = "." * i + s1 # think about what this is doing!
                    my_best_score = z 
                    num = i
                    list_to_save = [my_best_align, s1, 'Best score: ', my_best_score]
                dict_to_save[num] = list_to_save
            return dict_to_save
        else:
            return "The ordered sequences and their lengths are:", s1, s2, l1, l2
    return 0

# Main thingy
if __name__ == '__main__':
    """Makes sure the main function is called from the command line"""
    status = entry_point(sys.argv)
    sys.exit(status)

**********************************************************************

Testing align_seqs_better.py...

align_seqs_better.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 


**********************************************************************
Too few or too many arguements...
Continuing with defaults..

**********************************************************************

Code ran without errors

Time consumed = 2.66561s

======================================================================
Inspecting script file align_seqs.py...

File contents are:

**********************************************************************
"""
Assign the longer sequence s1, and the shorter to s2
l1 is length of the longest, l2 that of the shortest
"""

__appname__ = "align_seqs.py"
__package__ = "csv"

import csv

## importing the DNA sequences
with open('../data/DNA_sequence.csv','r') as f:
    DNAdata = csv.reader(f)
    rows = list(DNAdata)
seq1 = str(rows[0])
seq2 = str(rows[1])


l1 = len(seq1)
l2 = len(seq2)
if l1 >= l2:
    s1 = seq1
    s2 = seq2
else:
    s1 = seq2
    s2 = seq1
    l1, l2 = l2, l1 # swap the two lengths

def calculate_score(s1, s2, l1, l2, startpoint):
    """A function that computes a score by returning the number of matches starting
    from arbitrary startpoint (chosen by user)"""
    matched = "" # to hold string displaying alignements
    score = 0
    for i in range(l2):
        if (i + startpoint) < l1:
            if s1[i + startpoint] == s2[i]: # if the bases match
                matched = matched + "*"
                score = score + 1
            else:
                matched = matched + "-"

    # some formatted output
    print("." * startpoint + matched)           
    print("." * startpoint + s2)
    print(s1)
    print(score) 
    print(" ")

    return score

# Test the function with some example starting points:
# calculate_score(s1, s2, l1, l2, 0)
# calculate_score(s1, s2, l1, l2, 1)
# calculate_score(s1, s2, l1, l2, 5)

# now try to find the best match (highest score) for the two sequences
my_best_align = None
my_best_score = -1

h = open('../results/bestalignment.txt','w')
for i in range(l1): # Note that you just take the last alignment with the highest score
    z = calculate_score(s1, s2, l1, l2, i)
    if z > my_best_score:
        my_best_align = "." * i + s2 # think about what this is doing!
        my_best_score = z 
h.write('The best alignment is: ' + str(my_best_align) + '\n')
h.write('The corresponding best score is: ' + str(my_best_score))
h.close()
print(my_best_align)
print(s1)
print("Best score:", my_best_score)


**********************************************************************

Testing align_seqs.py...

align_seqs.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 


**********************************************************************
**-----*****--
['CAATTCGGAT']
['ATCGCCGGATTACGGG']
7
 
.--------*--*--
.['CAATTCGGAT']
['ATCGCCGGATTACGGG']
2
 
..--*-----------
..['CAATTCGGAT']
['ATCGCCGGATTACGGG']
1
 
...----------*---
...['CAATTCGGAT']
['ATCGCCGGATTACGGG']
1
 
....--*-----------
....['CAATTCGGAT']
['ATCGCCGGATTACGGG']
1
 
.....--*---*-------
.....['CAATTCGGAT']
['ATCGCCGGATTACGGG']
2
 
......----***--*--**
......['CAATTCGGAT']
['ATCGCCGGATTACGGG']
6
 
.......---*-*-***---
.......['CAATTCGGAT']
['ATCGCCGGATTACGGG']
5
 
......
**********************************************************************

Code ran without errors

Time consumed = 0.02289s

======================================================================
Inspecting script file using_name.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3
# Filename: using_name.py

"""Checks if the entrance is the main entrance."""

__appname__ = "using_name.py"

if __name__ == '__main__':
    print('This program is being run by itself')
else:
    print('I am being imported from another module')

print("This module's name is: " + __name__)

**********************************************************************

Testing using_name.py...

using_name.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 100

Output (only first 500 characters): 


**********************************************************************
This program is being run by itself
This module's name is: __main__

**********************************************************************

Code ran without errors

Time consumed = 0.02195s

======================================================================
Inspecting script file dictionary.py...

File contents are:

**********************************************************************
"""This script uses the dictionary in Python."""

__appname__ = "dictionary.py"

taxa = [ ('Myotis lucifugus','Chiroptera'),
         ('Gerbillus henleyi','Rodentia',),
         ('Peromyscus crinitus', 'Rodentia'),
         ('Mus domesticus', 'Rodentia'),
         ('Cleithrionomys rutilus', 'Rodentia'),
         ('Microgale dobsoni', 'Afrosoricida'),
         ('Microgale talazaci', 'Afrosoricida'),
         ('Lyacon pictus', 'Carnivora'),
         ('Arctocephalus gazella', 'Carnivora'),
         ('Canis lupus', 'Carnivora'),
        ]

# Write a python script to populate a dictionary called taxa_dic derived from
# taxa so that it maps order names to sets of taxa and prints it to screen.
# 
# An example output is:
#  
# 'Chiroptera' : set(['Myotis lucifugus']) ... etc. OR, 'Chiroptera': {'Myotis
#  lucifugus'} ... etc

taxa_dic = {}
for value,key in taxa:
    taxa_dic[key] = {value}
print(taxa_dic)

# Now write a list comprehension that does the same (including the printing after the dictionary has been created)  
 
#### Your solution here #### 
taxa_dic = {key:{value} for value,key in taxa}

**********************************************************************

Testing dictionary.py...

dictionary.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 100

Output (only first 500 characters): 


**********************************************************************
{'Chiroptera': {'Myotis lucifugus'}, 'Rodentia': {'Cleithrionomys rutilus'}, 'Afrosoricida': {'Microgale talazaci'}, 'Carnivora': {'Canis lupus'}}

**********************************************************************

Code ran without errors

Time consumed = 0.02255s

======================================================================
Inspecting script file test_control_flow.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Some functions exemplifying the use of control statements"""

__author__ = 'Your Name (Your.Name@your.email.address)'
__version__ = '0.0.1'

import sys
import doctest # Import the doctest module

def even_or_odd(x=0):
    """Find whether a number x is even or odd.
      
    >>> even_or_odd(10)
    '10 is Even!'
    
    >>> even_or_odd(5)
    '5 is Odd!'
    
    whenever a float is provided, then the closest integer is used:    
    >>> even_or_odd(3)
    '3 is Odd!'
    
    in case of negative numbers, the positive is taken:    
    >>> even_or_odd(-2)
    '-2 is Even!'
    
    """
    #Define function to be tested
    if x % 2 == 0:
        return f"{x} is Even!"
    return f"{x} is Odd!"

def main(argv): 
    """defines the main entrance"""
    print(even_or_odd(22))
    print(even_or_odd(33))
    return 0

if (__name__ == "__main__"):
    status = main(sys.argv)

  # To run with embedded tests
**********************************************************************

Testing test_control_flow.py...

test_control_flow.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 


**********************************************************************
22 is Even!
33 is Odd!

**********************************************************************

Code ran without errors

Time consumed = 0.04677s

======================================================================
Inspecting script file oaks_debugme_groupwork.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3
"""This script checks whether the TestOaksData.csv input file contains a header,
prints tree species and saves only the oak species"""

__author__ = "__Group3__"

import csv
import sys
import doctest

#Define function
def is_an_oak(name):
    """ Returns True if name starts with 'quercus' and is followed by a space.

    >>> is_an_oak("Fagus sylvatica")
    False

    >>> is_an_oak("Quercuss ilex")
    False

    >>> is_an_oak("Quercus Ilex")
    True

    >>> is_an_oak("QUERCUS ILEX")
    True

    >>> is_an_oak("quercus ilex")    
    True
    """

    return name.lower().startswith('quercus ')

### Checking whether the dataset contains any oak species (species are given in latin)
def main(argv): 
    """ main entry pointry of the script"""
    f = open('../data/TestOaksData.csv','r')
    g = open('../results/JustOaksData.csv','w')
    taxa = csv.reader(f)
    csvwrite = csv.writer(g)
    oaks = set()
    
    csvwrite.writerow(["Genus", "Species"]) ### Adding column headers to the output list
    
    for row in taxa:
        if row[0].lower().startswith('genus'): ### Checking whether the input file contains header 
            continue
        print(row)
        print ("The genus is: ") 
        print(row[0] + '\n')
        if is_an_oak(row[0] + " "):
            print('FOUND AN OAK!\n')
            csvwrite.writerow([row[0], row[1]])    

    return 0
    
if (__name__ == "__main__"):
    status = main(sys.argv)

doctest.testmod() 
**********************************************************************

Testing oaks_debugme_groupwork.py...

oaks_debugme_groupwork.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 


**********************************************************************
['Quercus', ' robur']
The genus is: 
Quercus

FOUND AN OAK!

['Fraxinus', ' excelsior']
The genus is: 
Fraxinus

['Pinus', ' sylvestris']
The genus is: 
Pinus

['Quercus', ' cerris']
The genus is: 
Quercus

FOUND AN OAK!

['Quercus', ' petraea']
The genus is: 
Quercus

FOUND AN OAK!


**********************************************************************

Code ran without errors

Time consumed = 0.04318s

======================================================================
Inspecting script file sysargv.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3
# Author: Xuan Wang
# Contact: xuan.wang22@imperial.ac.uk

"""An in-class exercise which prints the input parameters"""

__appname__ = "sysargv.py"

import sys
print("This is the name of the script: ", sys.argv[0])
print("Number of arguments: ", len(sys.argv))
print("The arguments are: ", str(sys.argv))

**********************************************************************

Testing sysargv.py...

sysargv.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 100

Output (only first 500 characters): 


**********************************************************************
This is the name of the script:  sysargv.py
Number of arguments:  1
The arguments are:  ['sysargv.py']

**********************************************************************

Code ran without errors

Time consumed = 0.02475s

======================================================================
Inspecting script file tuple.py...

File contents are:

**********************************************************************
"""prints a combination of string and pre-defined elements"""

__appname__ = "tuple.py"

birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
        )

for latin_name,common_name,mass in birds:
    print("Latin name: ",latin_name," Common name: ",common_name," Mass: ",mass, end='\n')

**********************************************************************

Testing tuple.py...

tuple.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 100

Output (only first 500 characters): 


**********************************************************************
Latin name:  Passerculus sandwichensis  Common name:  Savannah sparrow  Mass:  18.7
Latin name:  Delichon urbica  Common name:  House martin  Mass:  19
Latin name:  Junco phaeonotus  Common name:  Yellow-eyed junco  Mass:  19.5
Latin name:  Junco hyemalis  Common name:  Dark-eyed junco  Mass:  19.6
Latin name:  Tachycineata bicolor  Common name:  Tree swallow  Mass:  20.2

**********************************************************************

Code ran without errors

Time consumed = 0.02230s

======================================================================
Inspecting script file cfexercises2.py...

File contents are:

**********************************************************************
"""Defines various functions"""

__appname__ = "cfexercise2.py"

def hello_1(x):
    """Print hello every three times"""
    for j in range(x):
        if j % 3 == 0:
            print('hello')
    print(' ')
hello_1(12)

#######

def hello_2(x):
    """prints hello every three times"""
    for j in range(x):
        if j % 5 == 3:
            print('hello')
        elif j % 4 == 3:
            print('hello')
    print(' ')
hello_2(12)

######

def hello_3(x,y):
    """prints space and hello"""
    for i in range(x, y):
        print('hello')
    print(' ')
hello_3(3, 17)

######

def hello_4(x):
    """Prints hello as long as the number is not 15"""
    while x != 15:
        print('hello')
        x = x + 3
    print(' ')

hello_4(0)

######

def hello_5(x):
    """only print if x is 31 or 18"""
    while x < 100:
        if x == 31:
            for k in range(7):
                print('hello')
        elif x == 18:
            print('hello')
        x = x + 1
    print(' ')

hello_5(12)

#####
def hello_6(x,y):
    """prints while x is true and y not equal to 6"""
    while x: # while x is True
        print("hello!" + str(y))
        y += 1
        if y == 6:
            break
    print(' ')
hello_6(True, 0)
**********************************************************************

Testing cfexercises2.py...

cfexercises2.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 


**********************************************************************
hello
hello
hello
hello
 
hello
hello
hello
hello
 
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
 
hello
hello
hello
hello
hello
 
hello
hello
hello
hello
hello
hello
hello
hello
 
hello!0
hello!1
hello!2
hello!3
hello!4
hello!5
 

**********************************************************************

Code ran without errors

Time consumed = 0.02208s

======================================================================
Inspecting script file basic_io1.py...

File contents are:

**********************************************************************
"""Opening and printing lines in file"""

__appname__ = "basic_io1.py"

#############################
# FILE INPUT
#############################
# Open a file for reading
with open('../sandbox/test.txt', 'r') as f:
    # use "implicit" for loop:
    # if the object is a file, python will cycle over lines
    for line in f:
        print(line)

# Once you drop out of the with, the file is automatically closed

# Same example, skip blank lines
with open('../sandbox/test.txt', 'r') as f:
    for line in f:
        if len(line.strip()) > 0:
            print(line)

**********************************************************************

Testing basic_io1.py...

basic_io1.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 100

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Traceback (most recent call last):
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2022-23/Coursework/StudentRepos/XuanWang_/Week2/code/basic_io1.py", line 9, in <module>
    with open('../sandbox/test.txt', 'r') as f:
FileNotFoundError: [Errno 2] No such file or directory: '../sandbox/test.txt'

======================================================================
Inspecting script file basic_io2.py...

File contents are:

**********************************************************************
"""Opening and editing certain file"""

__appname__ = "basic_io2.py"

############
# FILE OUTPUT
###############
# Save the elements of a list to a file
list_to_save = range(100)

f = open('../sandbox/testout.txt','w')

for i in list_to_save:
    f.write(str(i) + '\n')

f.close()

**********************************************************************

Testing basic_io2.py...

basic_io2.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 100

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.02166s

======================================================================
Inspecting script file boilerplate.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Description of this program or application.
You can use several lines"""

__appname__ = '[application name here]'
__author__ = 'Your Name (your@email.address)'
__version__ = '0.0.1'
__license__ = "License for this code/program"

## imports ##
import sys # module to interface our program with the operating system

## constants ##


## functions ##
def main(argv):
    """ Main entry point of the program """
    print('This is a boilerplate') # NOTE: indented using two tabs or 4 spaces
    return 0

if __name__ == "__main__": 
    """Makes sure the "main" function is called from command line"""  
    status = main(sys.argv)
    sys.exit(status)
**********************************************************************

Testing boilerplate.py...

boilerplate.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 


**********************************************************************
This is a boilerplate

**********************************************************************

Code ran without errors

Time consumed = 0.02339s

======================================================================
Inspecting script file MyExampleScript.py...

File contents are:

**********************************************************************
"""An in-class excercise"""

__appname__ = "MyExampleScript.py"

def foo(x):
    """This function defines the square of the input parameter"""
    x *= x
    print(x)

foo(2)

**********************************************************************

Testing MyExampleScript.py...

MyExampleScript.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 


**********************************************************************
4

**********************************************************************

Code ran without errors

Time consumed = 0.02123s

======================================================================
Inspecting script file lc1.py...

File contents are:

**********************************************************************
"""This script includes the content of printing a combination of input string
and the pre-defined elements."""

__appname__ = "lc1.py"

birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
         )

#(1) Write three separate list comprehensions that create three different
# lists containing the latin names, common names and mean body masses for
# each species in birds, respectively. 

latin_names = [i[0] for i in birds]
print("Latin names: \n",latin_names)
common_names = [i[1] for i in birds]
print("Common names: \n",latin_names)
mean_body_masses = [i[2] for i in birds]
print("Mean Body Masses: \n", mean_body_masses)

# (2) Now do the same using conventional loops (you can choose to do this 
# before 1 !). 

for i in birds:
    latin_names1 = i[0]
    print("Latin names: \n",latin_names1)

for i in birds:
    common_names1 = i[1]
    print("Common names: \n",common_names1)

for i in birds:
    mean_body_masses1 = i[2]
    print("Mean Body Masses: \n", mean_body_masses1)

**********************************************************************

Testing lc1.py...

lc1.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 100

Output (only first 500 characters): 


**********************************************************************
Latin names: 
 ['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
Common names: 
 ['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
Mean Body Masses: 
 [18.7, 19, 19.5, 19.6, 20.2]
Latin names: 
 Passerculus sandwichensis
Latin names: 
 Delichon urbica
Latin names: 
 Junco phaeonotus
Latin names: 
 Junco hyemalis
Latin names: 
 Tachycineata bicolor
Common names: 
 Savannah spar
**********************************************************************

Code ran without errors

Time consumed = 0.02734s

======================================================================
Inspecting script file basic_csv.py...

File contents are:

**********************************************************************
"""This script reads files containing the required information"""

__appname__ = "basic_csv.py"

import csv

# Read a file containing:
# 'Species','Infraorder','Family','Distribution','Body mass male (Kg)'
with open('../data/testcsv.csv','r') as f:
    csvread = csv.reader(f)
    temp = []
    for row in csvread:
        temp.append(tuple(row))
        print(row)
        print("The species is", row[0])

# write a file containing only species name and Body mass
with open('../data/testcsv.csv','r') as f:
    with open('../data/bodymass.csv','w') as g:
        csvread = csv.reader(f)
        csvwrite = csv.writer(g)
        for row in csvread:
            print(row)
            csvwrite.writerow([row[0],row[4]])
**********************************************************************

Testing basic_csv.py...

basic_csv.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 100

Output (only first 500 characters): 


**********************************************************************
['Species', 'Infraorder', 'Family', 'Distribution', 'Body mass male (Kg)']
The species is Species
['Daubentonia_madagascariensis', 'Chiromyiformes ', 'Daubentoniidae', 'Madagascar', '2.7']
The species is Daubentonia_madagascariensis
['Allocebus_trichotis', 'Lemuriformes', 'Cheirogaleidae', 'Madagascar', '0.1']
The species is Allocebus_trichotis
['Avahi_laniger', 'Lemuriformes', 'Indridae', 'America', '1.03']
The species is Avahi_laniger
['Avahi_occidentalis', 'Lemuriformes', 'Indridae', 'Madagasc
**********************************************************************

Code ran without errors

Time consumed = 0.02345s

======================================================================
Inspecting script file oaks_debugme.py...

File contents are:

**********************************************************************
"""Debugging functions"""

__appname__ = "oaks_debugme.py"

import csv
import sys
import doctest

#Define function
def is_an_oak(name):

    """ Returns True if name is starts with 'quercus'.

    >>> is_an_oak('Quercus')
    True
    
    >>> is_an_oak('Fraxinus')
    False

    >>> is_an_oak('Quercuss')
    True

    >>> is_an_oak('Pinus')
    False
    
    """
    return name.lower().startswith('quercus')

def main(argv): 

    """Defines the main function"""
    
    f = open('../data/TestOaksData.csv','r')
    g = open('../data/JustOaksData.csv','w')
    taxa = csv.reader(f)
    csvwrite = csv.writer(g)
    oaks = set()
    for row in taxa:
        print(row)
        print ("The genus is: ")
        print(row[0] + '\n') 
        if is_an_oak(row[0]):
            print('FOUND AN OAK!\n')
            csvwrite.writerow([row[0], row[1]])    
    return 0
    f.close()
    g.close()

if (__name__ == "__main__"):
    status = main(sys.argv)
    doctest.testmod()
**********************************************************************

Testing oaks_debugme.py...

oaks_debugme.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 


**********************************************************************
['Genus', ' species']
The genus is: 
Genus

['Quercus', ' robur']
The genus is: 
Quercus

FOUND AN OAK!

['Fraxinus', ' excelsior']
The genus is: 
Fraxinus

['Pinus', ' sylvestris']
The genus is: 
Pinus

['Quercus', ' cerris']
The genus is: 
Quercus

FOUND AN OAK!

['Quercus', ' petraea']
The genus is: 
Quercus

FOUND AN OAK!


**********************************************************************

Code ran without errors

Time consumed = 0.06093s

======================================================================
======================================================================
Finished running scripts

Ran into 2 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 100

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!