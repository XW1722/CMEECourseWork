R about the stochastic model is about to run.

R version 4.2.0 (2022-04-22) -- "Vigorous Calisthenics"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # CMEE 2022 HPC exercises R code pro forma
> # For stochastic demographic model cluster run
> 
> # clear the workspace and turn off graphics
> rm(list=ls())
> graphics.off()
> 
> # load the functions needed by sourcing the main R code
> source("/rds/general/user/xw1722/home/xw1722_HPC_2022_main.R")
> 
> # read in the job number from the cluster
> iter <- as.numeric(Sys.getenv("PBS_ARRAY_INDEX"))
> # local testing
> # iter <- 251
> 
> # random number seeds
> set.seed(iter)
> 
> # select the initial condition being used
> clutch_distribution <- c(0.06, 0.08, 0.13, 0.15, 0.16, 0.18, 0.15, 0.06, 0.03)
> projection_matrix <- matrix(c(0.1, 0.6, 0.0, 0.0,
+                             0.0, 0.4, 0.4, 0.0,
+                             0.0, 0.0, 0.7, 0.25,
+                             2.6, 0.0, 0.0, 0.4), nrow = 4, ncol = 4)
> simulation_length <- 120
> initial_list <- list(state_initialise_adult(4, 100),
+                     state_initialise_adult(4, 10),
+                     state_initialise_spread(4, 100),
+                     state_initialise_spread(4, 10))
> # getting the initial population vector for each quarter of simulations
> iter_sets <- list(1:250, 251:500, 501:750, 751:1000)
> for (i in 1:4){
+     if (iter >= (min(as.numeric(iter_sets[[i]]))) &&
+     iter <= (max(as.numeric(iter_sets[[i]])))){
+         init_size <- initial_list[[i]]
+     }
+ }
> 
> # filename to store the results
> results <- paste("demographic_cluster_", iter, ".rda", sep = "")
> 
> # simulation and results saving
> stochastic_simulation(init_size,
+                     projection_matrix, 
+                     clutch_distribution, simulation_length)
  [1]    100    283    322    308    280    247    271    355    346    388
 [11]    414    487    476    555    618    675    731    796    792    853
 [21]    927    962    988   1092   1171   1223   1273   1351   1552   1586
 [31]   1629   1712   1907   2087   2227   2266   2354   2519   2774   3088
 [41]   3249   3511   3719   3871   4200   4482   4783   5170   5460   5849
 [51]   6410   6756   6953   7453   7813   8495   9197   9802  10192  10922
 [61]  11485  12142  12971  13854  14774  15488  16401  17656  18848  19968
 [71]  21586  22995  24656  26245  27918  29723  31391  33436  36150  38205
 [81]  40428  43114  46310  49296  52244  55327  58947  62623  66951  70812
 [91]  75325  80566  85439  90866  96626 103559 110175 117153 124841 133002
[101] 140943 150070 160222 170830 181641 193433 205997 219073 233183 248622
[111] 264786 282882 301206 319636 342595 365323 388141 412277 440391 469593
[121] 501022
> # save the results directly by the output of the function
> save(pop_size, file = results)
> 
> 
R (stochastic model) has finished running.

============================================

        Job resource usage summary 

                 Memory (GB)    NCPUs
 Requested  :         1             1
 Used       :         0 (peak)   0.66 (ave)

============================================
