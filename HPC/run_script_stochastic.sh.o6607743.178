R about the stochastic model is about to run.

R version 4.2.0 (2022-04-22) -- "Vigorous Calisthenics"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # CMEE 2022 HPC exercises R code pro forma
> # For stochastic demographic model cluster run
> 
> # clear the workspace and turn off graphics
> rm(list=ls())
> graphics.off()
> 
> # load the functions needed by sourcing the main R code
> source("/rds/general/user/xw1722/home/xw1722_HPC_2022_main.R")
> 
> # read in the job number from the cluster
> iter <- as.numeric(Sys.getenv("PBS_ARRAY_INDEX"))
> # local testing
> # iter <- 251
> 
> # random number seeds
> set.seed(iter)
> 
> # select the initial condition being used
> clutch_distribution <- c(0.06, 0.08, 0.13, 0.15, 0.16, 0.18, 0.15, 0.06, 0.03)
> projection_matrix <- matrix(c(0.1, 0.6, 0.0, 0.0,
+                             0.0, 0.4, 0.4, 0.0,
+                             0.0, 0.0, 0.7, 0.25,
+                             2.6, 0.0, 0.0, 0.4), nrow = 4, ncol = 4)
> simulation_length <- 120
> initial_list <- list(state_initialise_adult(4, 100),
+                     state_initialise_adult(4, 10),
+                     state_initialise_spread(4, 100),
+                     state_initialise_spread(4, 10))
> # getting the initial population vector for each quarter of simulations
> iter_sets <- list(1:250, 251:500, 501:750, 751:1000)
> for (i in 1:4){
+     if (iter >= (min(as.numeric(iter_sets[[i]]))) &&
+     iter <= (max(as.numeric(iter_sets[[i]])))){
+         init_size <- initial_list[[i]]
+     }
+ }
> 
> # filename to store the results
> results <- paste("demographic_cluster_", iter, ".rda", sep = "")
> 
> # simulation and results saving
> stochastic_simulation(init_size,
+                     projection_matrix, 
+                     clutch_distribution, simulation_length)
  [1]    100    311    301    278    238    251    286    345    366    359
 [11]    376    367    368    442    504    534    504    547    615    683
 [21]    750    783    834    891   1005   1010   1044   1074   1213   1319
 [31]   1403   1475   1645   1740   1851   2067   2190   2306   2390   2493
 [41]   2614   2847   3037   3372   3662   3989   4172   4468   4802   5130
 [51]   5491   5799   6083   6557   6992   7495   8093   8496   9049   9581
 [61]  10223  10945  11849  12476  13212  14147  14894  15767  16844  18119
 [71]  19419  20402  21612  22972  24645  26435  28334  30253  32482  34421
 [81]  36298  39024  41190  43631  46675  49590  52914  56532  60168  63983
 [91]  68403  72876  77558  82660  87895  93877 100205 106305 113532 121732
[101] 129202 136994 146088 156514 166358 177378 189033 201061 214819 229252
[111] 243116 259373 275899 294680 313992 335430 357040 380017 404968 431384
[121] 459319
> # save the results directly by the output of the function
> save(pop_size, file = results)
> 
> 
R (stochastic model) has finished running.

============================================

        Job resource usage summary 

                 Memory (GB)    NCPUs
 Requested  :         1             1
 Used       :         0 (peak)   0.50 (ave)

============================================
