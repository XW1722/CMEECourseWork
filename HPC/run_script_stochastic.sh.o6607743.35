R about the stochastic model is about to run.

R version 4.2.0 (2022-04-22) -- "Vigorous Calisthenics"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # CMEE 2022 HPC exercises R code pro forma
> # For stochastic demographic model cluster run
> 
> # clear the workspace and turn off graphics
> rm(list=ls())
> graphics.off()
> 
> # load the functions needed by sourcing the main R code
> source("/rds/general/user/xw1722/home/xw1722_HPC_2022_main.R")
> 
> # read in the job number from the cluster
> iter <- as.numeric(Sys.getenv("PBS_ARRAY_INDEX"))
> # local testing
> # iter <- 251
> 
> # random number seeds
> set.seed(iter)
> 
> # select the initial condition being used
> clutch_distribution <- c(0.06, 0.08, 0.13, 0.15, 0.16, 0.18, 0.15, 0.06, 0.03)
> projection_matrix <- matrix(c(0.1, 0.6, 0.0, 0.0,
+                             0.0, 0.4, 0.4, 0.0,
+                             0.0, 0.0, 0.7, 0.25,
+                             2.6, 0.0, 0.0, 0.4), nrow = 4, ncol = 4)
> simulation_length <- 120
> initial_list <- list(state_initialise_adult(4, 100),
+                     state_initialise_adult(4, 10),
+                     state_initialise_spread(4, 100),
+                     state_initialise_spread(4, 10))
> # getting the initial population vector for each quarter of simulations
> iter_sets <- list(1:250, 251:500, 501:750, 751:1000)
> for (i in 1:4){
+     if (iter >= (min(as.numeric(iter_sets[[i]]))) &&
+     iter <= (max(as.numeric(iter_sets[[i]])))){
+         init_size <- initial_list[[i]]
+     }
+ }
> 
> # filename to store the results
> results <- paste("demographic_cluster_", iter, ".rda", sep = "")
> 
> # simulation and results saving
> stochastic_simulation(init_size,
+                     projection_matrix, 
+                     clutch_distribution, simulation_length)
  [1]    100    311    304    251    213    217    270    350    412    392
 [11]    416    434    477    469    492    518    642    699    752    790
 [21]    792    905    963    989   1030   1106   1202   1303   1371   1449
 [31]   1592   1691   1728   1936   2076   2176   2311   2482   2650   2855
 [41]   3060   3347   3551   3679   3957   4211   4618   4920   5157   5466
 [51]   5871   6334   6840   7145   7588   8078   8400   8912   9430  10068
 [61]  10807  11507  12213  12991  13980  15057  16013  16806  18203  19445
 [71]  20454  21811  23448  24900  26517  28203  30034  31853  33849  36120
 [81]  38505  41220  44047  46837  49739  52977  56232  60040  64046  68088
 [91]  73290  77332  82660  87929  94623 100848 106960 113309 121551 129194
[101] 137107 145849 155238 165788 176662 187751 200052 212820 226315 240880
[111] 257075 273146 291429 310290 331032 352910 375500 399520 426230 454403
[121] 484486
> # save the results directly by the output of the function
> save(pop_size, file = results)
> 
> 
R (stochastic model) has finished running.

============================================

        Job resource usage summary 

                 Memory (GB)    NCPUs
 Requested  :         1             1
 Used       :         0 (peak)   0.66 (ave)

============================================
