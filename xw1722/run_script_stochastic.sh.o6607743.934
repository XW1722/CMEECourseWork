R about the stochastic model is about to run.

R version 4.2.0 (2022-04-22) -- "Vigorous Calisthenics"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # CMEE 2022 HPC exercises R code pro forma
> # For stochastic demographic model cluster run
> 
> # clear the workspace and turn off graphics
> rm(list=ls())
> graphics.off()
> 
> # load the functions needed by sourcing the main R code
> source("/rds/general/user/xw1722/home/xw1722_HPC_2022_main.R")
> 
> # read in the job number from the cluster
> iter <- as.numeric(Sys.getenv("PBS_ARRAY_INDEX"))
> # local testing
> # iter <- 251
> 
> # random number seeds
> set.seed(iter)
> 
> # select the initial condition being used
> clutch_distribution <- c(0.06, 0.08, 0.13, 0.15, 0.16, 0.18, 0.15, 0.06, 0.03)
> projection_matrix <- matrix(c(0.1, 0.6, 0.0, 0.0,
+                             0.0, 0.4, 0.4, 0.0,
+                             0.0, 0.0, 0.7, 0.25,
+                             2.6, 0.0, 0.0, 0.4), nrow = 4, ncol = 4)
> simulation_length <- 120
> initial_list <- list(state_initialise_adult(4, 100),
+                     state_initialise_adult(4, 10),
+                     state_initialise_spread(4, 100),
+                     state_initialise_spread(4, 10))
> # getting the initial population vector for each quarter of simulations
> iter_sets <- list(1:250, 251:500, 501:750, 751:1000)
> for (i in 1:4){
+     if (iter >= (min(as.numeric(iter_sets[[i]]))) &&
+     iter <= (max(as.numeric(iter_sets[[i]])))){
+         init_size <- initial_list[[i]]
+     }
+ }
> 
> # filename to store the results
> results <- paste("demographic_cluster_", iter, ".rda", sep = "")
> 
> # simulation and results saving
> stochastic_simulation(init_size,
+                     projection_matrix, 
+                     clutch_distribution, simulation_length)
  [1]    10     9     5     4     4     4     4     4     4     4    12     9
 [13]     9     8    13    22    25    32    28    32    33    27    25    27
 [25]    29    36    31    37    47    52    58    63    65    77    98   104
 [37]   115   109   123   143   155   178   167   165   164   172   178   211
 [49]   239   240   255   296   284   289   372   434   456   476   484   541
 [61]   546   592   666   733   753   834   906   939   998  1061  1088  1132
 [73]  1256  1341  1448  1453  1487  1628  1706  1930  1946  2041  2134  2253
 [85]  2378  2608  2859  2967  3108  3274  3493  3925  4185  4382  4595  4789
 [97]  5224  5735  6169  6575  6845  7333  7929  8451  8966  9443 10125 10794
[109] 11398 12089 12849 13882 14837 15949 16811 17961 18788 19945 21404 22470
[121] 24091
> # save the results directly by the output of the function
> save(pop_size, file = results)
> 
> 
R (stochastic model) has finished running.

============================================

        Job resource usage summary 

                 Memory (GB)    NCPUs
 Requested  :         1             1
 Used       :         0 (peak)   1.00 (ave)

============================================
