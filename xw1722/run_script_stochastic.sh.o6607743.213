R about the stochastic model is about to run.

R version 4.2.0 (2022-04-22) -- "Vigorous Calisthenics"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-conda-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # CMEE 2022 HPC exercises R code pro forma
> # For stochastic demographic model cluster run
> 
> # clear the workspace and turn off graphics
> rm(list=ls())
> graphics.off()
> 
> # load the functions needed by sourcing the main R code
> source("/rds/general/user/xw1722/home/xw1722_HPC_2022_main.R")
> 
> # read in the job number from the cluster
> iter <- as.numeric(Sys.getenv("PBS_ARRAY_INDEX"))
> # local testing
> # iter <- 251
> 
> # random number seeds
> set.seed(iter)
> 
> # select the initial condition being used
> clutch_distribution <- c(0.06, 0.08, 0.13, 0.15, 0.16, 0.18, 0.15, 0.06, 0.03)
> projection_matrix <- matrix(c(0.1, 0.6, 0.0, 0.0,
+                             0.0, 0.4, 0.4, 0.0,
+                             0.0, 0.0, 0.7, 0.25,
+                             2.6, 0.0, 0.0, 0.4), nrow = 4, ncol = 4)
> simulation_length <- 120
> initial_list <- list(state_initialise_adult(4, 100),
+                     state_initialise_adult(4, 10),
+                     state_initialise_spread(4, 100),
+                     state_initialise_spread(4, 10))
> # getting the initial population vector for each quarter of simulations
> iter_sets <- list(1:250, 251:500, 501:750, 751:1000)
> for (i in 1:4){
+     if (iter >= (min(as.numeric(iter_sets[[i]]))) &&
+     iter <= (max(as.numeric(iter_sets[[i]])))){
+         init_size <- initial_list[[i]]
+     }
+ }
> 
> # filename to store the results
> results <- paste("demographic_cluster_", iter, ".rda", sep = "")
> 
> # simulation and results saving
> stochastic_simulation(init_size,
+                     projection_matrix, 
+                     clutch_distribution, simulation_length)
  [1]    100    295    312    256    237    254    288    354    392    392
 [11]    397    394    484    506    543    587    643    688    730    797
 [21]    867    909    993   1011   1120   1204   1243   1397   1485   1582
 [31]   1610   1723   1855   2010   2150   2192   2316   2381   2578   2735
 [41]   3080   3193   3449   3821   3966   4269   4485   4840   5229   5563
 [51]   5881   6103   6568   7051   7480   8005   8417   8958   9587  10207
 [61]  10907  11522  12280  13148  13813  14667  15553  16638  17609  18672
 [71]  19868  21041  22707  24164  25802  27869  29672  31740  33668  35615
 [81]  38398  40445  43474  46252  49240  52114  55648  59779  63827  67520
 [91]  71685  75997  80903  86179  91344  97962 104409 111225 118464 126250
[101] 134315 142778 152429 161965 173350 184724 196007 208602 222370 236417
[111] 252293 268540 286713 304845 324260 345488 367836 392409 417868 445600
[121] 473971
> # save the results directly by the output of the function
> save(pop_size, file = results)
> 
> 
R (stochastic model) has finished running.

============================================

        Job resource usage summary 

                 Memory (GB)    NCPUs
 Requested  :         1             1
 Used       :         0 (peak)   0.66 (ave)

============================================
